local httpService = game:GetService("HttpService")
local VirtualUser = game:GetService("VirtualUser")

local FlagsManager = {}

FlagsManager.Folder = "Avantrix"
FlagsManager.Ignore = {}
FlagsManager.Flags = {}
FlagsManager.Library = nil
FlagsManager.AntiAFK = false

-- Anti-AFK System Functions (defined early to avoid errors)
function FlagsManager:InitAntiAFK()
    if FlagsManager.AntiAFK then
        return -- Already initialized
    end
    
    FlagsManager.AntiAFK = true
    
    -- Show notification
    FlagsManager:SafeNotification('Anti-AFK', 'ANTI AFK AUTO LOAD ACTIVE', 3)
    
    -- Start Anti-AFK system
    task.spawn(function()
        while FlagsManager.AntiAFK do
            -- Capture controller and simulate mouse click to prevent AFK
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
            
            -- Wait 60 seconds before next anti-AFK action
            task.wait(60)
        end
    end)
    
    -- Handle player idle event
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    player.Idled:Connect(function()
        if FlagsManager.AntiAFK then
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end)
end

function FlagsManager:DisableAntiAFK()
    FlagsManager.AntiAFK = false
    FlagsManager:SafeNotification('Anti-AFK', 'Anti-AFK system disabled', 2)
end

-- Fungsi helper untuk notifikasi yang aman
function FlagsManager:SafeNotification(title, message, duration)
    if FlagsManager.Library and FlagsManager.Library.Notification then
        local success = pcall(function()
            FlagsManager.Library:Notification(title, message, duration or 3)
        end)
        if not success then
            print("[FlagsManager] " .. title .. ": " .. message)
        end
    else
        print("[FlagsManager] " .. title .. ": " .. message)
    end
end

-- Enhanced UFO Loader Animation
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Enhanced blur effect with color correction
local blur = Instance.new("BlurEffect", Lighting)
blur.Size = 0
local colorCorrection = Instance.new("ColorCorrectionEffect", Lighting)
colorCorrection.Brightness = 0
colorCorrection.Contrast = 0
colorCorrection.Saturation = 0

TweenService:Create(blur, TweenInfo.new(0.8, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Size = 35}):Play()
TweenService:Create(colorCorrection, TweenInfo.new(0.8, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
    Brightness = -0.2,
    Contrast = 0.3,
    Saturation = -0.5
}):Play()

local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "AvantrixLoader"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(1, 0, 1, 0)
frame.BackgroundTransparency = 1

-- Create main container for centered content
local mainContainer = Instance.new("Frame", frame)
mainContainer.Size = UDim2.new(0, 600, 0, 400)
mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
mainContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
mainContainer.BackgroundTransparency = 1
mainContainer.ZIndex = 2

-- Create UFO similar to the image
local ufoContainer = Instance.new("Frame", mainContainer)
ufoContainer.Size = UDim2.new(0, 200, 0, 120)
ufoContainer.AnchorPoint = Vector2.new(0.5, 0.5)
ufoContainer.Position = UDim2.new(0.5, 0, 0.3, 0)
ufoContainer.BackgroundTransparency = 1
ufoContainer.ZIndex = 4

-- UFO Dome (top part)
local ufoDome = Instance.new("Frame", ufoContainer)
ufoDome.Size = UDim2.new(0, 80, 0, 40)
ufoDome.AnchorPoint = Vector2.new(0.5, 1)
ufoDome.Position = UDim2.new(0.5, 0, 0.6, 0)
ufoDome.BackgroundColor3 = Color3.fromRGB(200, 220, 240)
ufoDome.BorderSizePixel = 0

local ufoDomeCorner = Instance.new("UICorner", ufoDome)
ufoDomeCorner.CornerRadius = UDim.new(0.5, 0)

local ufoDomeGradient = Instance.new("UIGradient", ufoDome)
ufoDomeGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(220, 240, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 200, 220))
})
ufoDomeGradient.Rotation = 90

-- UFO Body (main part - pink/red like in image)
local ufoBody = Instance.new("Frame", ufoContainer)
ufoBody.Size = UDim2.new(0, 160, 0, 50)
ufoBody.AnchorPoint = Vector2.new(0.5, 0.5)
ufoBody.Position = UDim2.new(0.5, 0, 0.6, 0)
ufoBody.BackgroundColor3 = Color3.fromRGB(220, 80, 120)
ufoBody.BorderSizePixel = 0

local ufoBodyCorner = Instance.new("UICorner", ufoBody)
ufoBodyCorner.CornerRadius = UDim.new(0.5, 0)

local ufoBodyGradient = Instance.new("UIGradient", ufoBody)
ufoBodyGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(240, 100, 140)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(220, 80, 120)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 60, 100))
})
ufoBodyGradient.Rotation = 90

-- UFO Lights (yellow circles like in image)
local lights = {}
for i = 1, 6 do
    local light = Instance.new("Frame", ufoBody)
    light.Size = UDim2.new(0, 12, 0, 12)
    light.Position = UDim2.new(0.15 + (i-1) * 0.14, -6, 0.5, -6)
    light.BackgroundColor3 = Color3.fromRGB(255, 220, 80)
    light.BorderSizePixel = 0
    
    local lightCorner = Instance.new("UICorner", light)
    lightCorner.CornerRadius = UDim.new(1, 0)
    
    -- Add glow effect
    local lightGlow = Instance.new("Frame", light)
    lightGlow.Size = UDim2.new(1.5, 0, 1.5, 0)
    lightGlow.AnchorPoint = Vector2.new(0.5, 0.5)
    lightGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
    lightGlow.BackgroundColor3 = Color3.fromRGB(255, 255, 150)
    lightGlow.BackgroundTransparency = 0.7
    lightGlow.BorderSizePixel = 0
    lightGlow.ZIndex = -1
    
    local glowCorner = Instance.new("UICorner", lightGlow)
    glowCorner.CornerRadius = UDim.new(1, 0)
    
    table.insert(lights, {light = light, glow = lightGlow})
end

-- Tractor Beam
local tractorBeam = Instance.new("Frame", ufoContainer)
tractorBeam.Size = UDim2.new(0, 60, 0, 150)
tractorBeam.AnchorPoint = Vector2.new(0.5, 0)
tractorBeam.Position = UDim2.new(0.5, 0, 0.85, 0)
tractorBeam.BackgroundColor3 = Color3.fromRGB(200, 255, 200)
tractorBeam.BackgroundTransparency = 0.7
tractorBeam.BorderSizePixel = 0
tractorBeam.ZIndex = 1

-- Make tractor beam wider at bottom
local beamGradient = Instance.new("UIGradient", tractorBeam)
beamGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.3),
    NumberSequenceKeypoint.new(1, 0.8)
})
beamGradient.Rotation = 90

-- Create "Avantrix" text in tractor beam
local avantrixText = Instance.new("TextLabel", tractorBeam)
avantrixText.Size = UDim2.new(1, 0, 0.4, 0)
avantrixText.AnchorPoint = Vector2.new(0.5, 0.5)
avantrixText.Position = UDim2.new(0.5, 0, 0.7, 0)
avantrixText.BackgroundTransparency = 1
avantrixText.Text = "Avantrix"
avantrixText.Font = Enum.Font.GothamBold
avantrixText.TextSize = 24
avantrixText.TextColor3 = Color3.fromRGB(255, 255, 255)
avantrixText.TextStrokeTransparency = 0.5
avantrixText.TextStrokeColor3 = Color3.fromRGB(100, 255, 100)
avantrixText.TextTransparency = 1
avantrixText.ZIndex = 5

-- Animate UFO entrance
local ufoEntranceTween = TweenService:Create(ufoContainer, TweenInfo.new(1.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
    Position = UDim2.new(0.5, 0, 0.3, 0)
})

-- Start with UFO off-screen
ufoContainer.Position = UDim2.new(0.5, 0, -0.3, 0)
ufoEntranceTween:Play()

-- Animate UFO floating
task.spawn(function()
    task.wait(1.5) -- Wait for entrance animation
    while screenGui.Parent do
        TweenService:Create(ufoContainer, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
            Position = UDim2.new(0.5, 0, 0.28, 0)
        }):Play()
        task.wait(2)
        TweenService:Create(ufoContainer, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
            Position = UDim2.new(0.5, 0, 0.32, 0)
        }):Play()
        task.wait(2)
    end
end)

-- Animate UFO lights
task.spawn(function()
    while screenGui.Parent do
        for i, lightData in ipairs(lights) do
            task.spawn(function()
                TweenService:Create(lightData.light, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                    BackgroundTransparency = 0,
                    Size = UDim2.new(0, 16, 0, 16)
                }):Play()
                TweenService:Create(lightData.glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                    BackgroundTransparency = 0.4,
                    Size = UDim2.new(2, 0, 2, 0)
                }):Play()
                task.wait(0.3)
                TweenService:Create(lightData.light, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                    BackgroundTransparency = 0.3,
                    Size = UDim2.new(0, 12, 0, 12)
                }):Play()
                TweenService:Create(lightData.glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                    BackgroundTransparency = 0.7,
                    Size = UDim2.new(1.5, 0, 1.5, 0)
                }):Play()
            end)
            task.wait(0.15)
        end
        task.wait(1)
    end
end)

-- Animate tractor beam
task.spawn(function()
    task.wait(2) -- Wait for UFO to settle
    
    -- Beam appears
    TweenService:Create(tractorBeam, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        BackgroundTransparency = 0.3,
        Size = UDim2.new(0, 100, 0, 150)
        Position = UDim2.new(0.5, 0, 0.85, 0)
    }):Play()
    
    -- Text appears in beam
    task.wait(0.5)
    TweenService:Create(avantrixText, TweenInfo.new(1, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        TextTransparency = 0,
        TextSize = 28
    }):Play()
    
    -- Beam pulsing effect
    while screenGui.Parent do
        TweenService:Create(tractorBeam, TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
            BackgroundTransparency = 0.2
        }):Play()
        TweenService:Create(avantrixText, TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
            TextStrokeTransparency = 0.2
        }):Play()
        task.wait(1.5)
        TweenService:Create(tractorBeam, TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
            BackgroundTransparency = 0.5
        }):Play()
        TweenService:Create(avantrixText, TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
            TextStrokeTransparency = 0.7
        }):Play()
        task.wait(1.5)
    end
end)

-- Function to clean up and destroy animation
local function tweenOutAndDestroy()
    -- Fade out text first
    TweenService:Create(avantrixText, TweenInfo.new(0.8, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {
        TextTransparency = 1,
        TextSize = 20
    }):Play()
    
    -- Fade out tractor beam
    TweenService:Create(tractorBeam, TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 20, 0, 50)
    }):Play()
    
    -- UFO flies away
    TweenService:Create(ufoContainer, TweenInfo.new(1.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {
        Position = UDim2.new(0.5, 0, -0.5, 0)
    }):Play()
    
    -- Fade out background effects
    TweenService:Create(blur, TweenInfo.new(1.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {Size = 0}):Play()
    TweenService:Create(colorCorrection, TweenInfo.new(1.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {
        Brightness = 0,
        Contrast = 0,
        Saturation = 0
    }):Play()
    
    task.wait(2)
    screenGui:Destroy()
    blur:Destroy()
    colorCorrection:Destroy()
end

-- Wait and then destroy animation
task.wait(6)
tweenOutAndDestroy()

-- GRADIENT FUNCTIONS - Dapat digunakan di luar kode ini
local function interpolate_color(color1, color2, t)
    local r = math.floor((1 - t) * color1[1] + t * color2[1])
    local g = math.floor((1 - t) * color1[2] + t * color2[2])
    local b = math.floor((1 - t) * color1[3] + t * color2[3])
    return string.format("#%02x%02x%02x", r, g, b)
end

local function hex_to_rgb(hex)
    -- Remove # if present
    if hex:sub(1, 1) == "#" then
        hex = hex:sub(2)
    end
    
    return {
        tonumber(hex:sub(1, 2), 16),
        tonumber(hex:sub(3, 4), 16),
        tonumber(hex:sub(5, 6), 16)
    }
end

local function gradient(word)
    if not word or #word == 0 then
        return "Error"
    end

    local start_color, end_color
    
    if getgenv and getgenv().GradientColor == nil then
        start_color = hex_to_rgb("ea00ff")
        end_color = hex_to_rgb("5700ff")
    elseif getgenv and getgenv().GradientColor then
        start_color = hex_to_rgb(getgenv().GradientColor.startingColor or "ea00ff")
        end_color = hex_to_rgb(getgenv().GradientColor.endingColor or "5700ff")
    else
        -- Fallback jika getgenv tidak tersedia
        start_color = hex_to_rgb("ea00ff")
        end_color = hex_to_rgb("5700ff")
    end

    local gradient_word = ""
    local word_len = #word
    local step = 1.0 / math.max(word_len - 1, 1)

    for i = 1, word_len do
        local t = step * (i - 1)
        local color = interpolate_color(start_color, end_color, t)
        gradient_word = gradient_word .. string.format('<font color="%s">%s</font>', color, word:sub(i, i))
    end

    return gradient_word
end

-- Export gradient function untuk penggunaan global
if getgenv then
    getgenv().gradient = gradient
    getgenv().interpolate_color = interpolate_color
    getgenv().hex_to_rgb = hex_to_rgb
end

-- Juga buat sebagai property dari FlagsManager
FlagsManager.gradient = gradient
FlagsManager.interpolate_color = interpolate_color
FlagsManager.hex_to_rgb = hex_to_rgb

FlagsManager.Parser = {
    Toggle = {
        Save = function(idx, object)
            return { type = "Toggle", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Slider = {
        Save = function(idx, object)
            return { type = "Slider", idx = idx, value = tostring(object.Value) }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(tonumber(data.value))
            end
        end,
    },
    Dropdown = {
        Save = function(idx, object)
            return { type = "Dropdown", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Bind = {
        Save = function(idx, object)
            return { type = "Bind", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Colorpicker = {
        Save = function(idx, object)
            return { type = "Colorpicker", idx = idx, value = object.Value:ToHex() }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(Color3.fromHex(data.value))
            end
        end,
    },
    Input = {
        Save = function(idx, object)
            return { type = "Input", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    }
}

function FlagsManager:SetIgnoreIndexes(list)
    for _, key in next, list do
        FlagsManager.Ignore[key] = true
    end
end

function FlagsManager:SetFolder(folder)
    FlagsManager.Folder = folder
    FlagsManager:BuildFolderTree()
end

function FlagsManager:Save(name)
    if not name then
        return false, "no config file is selected"
    end

    local fullPath = FlagsManager.Folder .. "/settings/" .. name .. ".json"

    local data = {
        objects = {},
    }

    for idx, option in next, FlagsManager.Flags do
        if not FlagsManager.Parser[option.Type] then
            continue
        end
        if FlagsManager.Ignore[idx] then
            continue
        end

        table.insert(data.objects, FlagsManager.Parser[option.Type].Save(idx, option))
    end

    local success, encoded = pcall(httpService.JSONEncode, httpService, data)
    if not success then
        return false, "failed to encode data"
    end

    writefile(fullPath, encoded)
    return true
end

function FlagsManager:Load(name)
    if not name then
        return false, "no config file is selected"
    end

    local file = FlagsManager.Folder .. "/settings/" .. name .. ".json"
    if not isfile(file) then
        return false, "invalid file"
    end

    local success, decoded = pcall(httpService.JSONDecode, httpService, readfile(file))
    if not success then
        return false, "decode error"
    end

    for _, option in next, decoded.objects do
        if FlagsManager.Parser[option.type] then
            task.spawn(function()
                FlagsManager.Parser[option.type].Load(option.idx, option)
            end)
        end
    end

    return true
end

function FlagsManager:Delete(name)
    if not name then
        return false, "no config file is selected"
    end

    local file = FlagsManager.Folder .. "/settings/" .. name .. ".json"
    if not isfile(file) then
        return false, "config file does not exist"
    end

    local success = pcall(function()
        delfile(file)
    end)

    if not success then
        return false, "failed to delete config file"
    end

    return true
end

function FlagsManager:BuildFolderTree()
    local paths = {
        FlagsManager.Folder,
        FlagsManager.Folder .. "/settings",
    }

    for i = 1, #paths do
        local str = paths[i]
        if not isfolder(str) then
            makefolder(str)
        end
    end
end

function FlagsManager:RefreshConfigList()
    local list = listfiles(FlagsManager.Folder .. "/settings")

    local out = {}
    for i = 1, #list do
        local file = list[i]
        if file:sub(-5) == ".json" then
            local pos = file:find(".json", 1, true)
            local start = pos

            local char = file:sub(pos, pos)
            while char ~= "/" and char ~= "\\" and char ~= "" do
                pos = pos - 1
                char = file:sub(pos, pos)
            end

            if char == "/" or char == "\\" then
                local name = file:sub(pos + 1, start - 1)
                if name ~= "options" then
                    table.insert(out, name)
                end
            end
        end
    end

    return out
end

function FlagsManager:GetAutoLoadConfig()
    local autoLoadFile = FlagsManager.Folder .. "/autoload.txt"
    if isfile(autoLoadFile) then
        return readfile(autoLoadFile)
    end
    return ""
end

function FlagsManager:SetAutoLoadConfig(configName)
    local autoLoadFile = FlagsManager.Folder .. "/autoload.txt"
    if configName and configName ~= "" then
        writefile(autoLoadFile, configName)
    else
        if isfile(autoLoadFile) then
            delfile(autoLoadFile)
        end
    end
end

function FlagsManager:SetLibrary(library)
    FlagsManager.Library = library
    FlagsManager.Flags = library.Flags
end

-- Fungsi helper untuk membuat UI element dengan error handling yang lebih robust
local function SafeCreateElement(parent, elementType, config)
    if not parent then
        warn("SafeCreateElement: Parent is nil for " .. tostring(elementType))
        return nil
    end
    
    local success, element = pcall(function()
        if elementType == "Section" then
            return parent:AddSection(config)
        elseif elementType == "Textbox" then
            return parent:AddTextbox(config)
        elseif elementType == "Dropdown" then
            return parent:AddDropdown(config.Flag or "TempDropdown", config)
        elseif elementType == "GroupButton" then
            -- Coba panggil AddGroupButton tanpa parameter
            return parent:AddGroupButton()
        elseif elementType == "Button" then
            return parent:AddButton(config)
        elseif elementType == "Paragraph" then
            return parent:AddParagraph(config)
        elseif elementType == "Toggle" then
            return parent:AddToggle(config.Flag or "TempToggle", config)
        else
            warn("SafeCreateElement: Unknown element type: " .. tostring(elementType))
            return nil
        end
    end)
    
    if success and element then
        return element
    else
        warn("SafeCreateElement: Failed to create " .. tostring(elementType) .. " - " .. tostring(element))
        return nil
    end
end

function FlagsManager:InitSaveSystem(tab)
    -- Validasi parameter utama dengan pengecekan yang lebih ketat
    if not tab then
        warn("FlagsManager:InitSaveSystem - tab parameter is required")
        FlagsManager:SafeNotification('Error', 'Failed to initialize save system: tab parameter is nil', 5)
        return false
    end
    
    -- Cek apakah tab memiliki method yang diperlukan
    if type(tab.AddSection) ~= "function" then
        warn("FlagsManager:InitSaveSystem - tab does not have AddSection method")
        FlagsManager:SafeNotification('Error', 'Invalid tab object provided', 5)
        return false
    end
    
    -- Validasi Library
    if not FlagsManager.Library then
        warn("FlagsManager:InitSaveSystem - Library is not set. Call SetLibrary first.")
        FlagsManager:SafeNotification('Error', 'Library not initialized. Call SetLibrary first.', 5)
        return false
    end
    
    -- Validasi Flags
    if not FlagsManager.Flags then
        warn("FlagsManager:InitSaveSystem - Flags is not set. Library may not be properly initialized.")
        FlagsManager:SafeNotification('Error', 'Flags not initialized properly.', 5)
        return false
    end

    -- Build folder structure terlebih dahulu
    local success = pcall(function()
        FlagsManager:BuildFolderTree()
    end)
    
    if not success then
        warn("FlagsManager:InitSaveSystem - Failed to build folder tree")
        FlagsManager:SafeNotification('Error', 'Failed to create folder structure', 5)
        return false
    end

    -- Variabel untuk menyimpan state
    local SaveManager_ConfigName = ""
    local SaveManager_AutoLoadConfig = ""
    
    -- Safely get auto load config
    local autoLoadSuccess = pcall(function()
        SaveManager_AutoLoadConfig = FlagsManager:GetAutoLoadConfig()
    end)
    
    if not autoLoadSuccess then
        SaveManager_AutoLoadConfig = ""
    end

    -- Buat Configuration Section dengan format yang diminta
    local ConfigSection = SafeCreateElement(tab, "Section", {
        Title = gradient("Import/Export Configs"), 
        Description = "", 
        Default = false, 
        Locked = false
    })
    
    if not ConfigSection then
        FlagsManager:SafeNotification('Error', 'Failed to create Configuration section', 5)
        return false
    end

    -- Add Anti-AFK Toggle
    local AntiAFKToggle = SafeCreateElement(ConfigSection, "Toggle", {
        Flag = "AntiAFK",
        Title = "Anti-AFK System",
        Description = "Automatically prevent AFK detection",
        Default = true,
        Callback = function(value)
            if value then
                FlagsManager:InitAntiAFK()
            else
                FlagsManager:DisableAntiAFK()
            end
        end
    })

    -- Tambahkan Textbox untuk nama config
    local ConfigNameTextbox = SafeCreateElement(ConfigSection, "Textbox", {
        Title = "Config Name",
        Description = "Enter a name for your configuration",
        Default = "",
        PlaceHolder = "Enter config name...",
        TextDisappear = false,
        Callback = function(value)
            SaveManager_ConfigName = value or ""
        end
    })

    -- Tambahkan Dropdown untuk daftar konfigurasi
    local configList = {}
    pcall(function()
        configList = FlagsManager:RefreshConfigList()
    end)
    
    local ConfigDropdown = SafeCreateElement(ConfigSection, "Dropdown", {
        Flag = "SaveManager_ConfigurationList",
        Title = "Configuration List",
        Description = "Select a configuration to load",
        Options = configList,
        Default = "",
        PlaceHolder = "Select configuration...",
        Multiple = false,
        Callback = function(value)
            -- Callback untuk dropdown selection
        end
    })

    -- Buat Group Button untuk tombol-tombol - panggil tanpa config
    local SaveManagerGroupButton = SafeCreateElement(ConfigSection, "GroupButton")
    
    if not SaveManagerGroupButton then
        FlagsManager:SafeNotification('Error', 'Failed to create button group', 5)
        return false
    end

    -- Konfigurasi tombol-tombol dengan error handling yang lebih baik
    local buttonConfigs = {
        {
            Title = "Create Configuration",
            Variant = "Primary",
            Callback = function()
                local name = SaveManager_ConfigName

                if not name or name:gsub(" ", "") == "" then
                    FlagsManager:SafeNotification('Error', 'Please enter a valid config name', 3)
                    return
                end

                local success, err = pcall(function()
                    return FlagsManager:Save(name)
                end)
                
                if not success or not err then
                    FlagsManager:SafeNotification('Error', 'Failed to create config: ' .. tostring(err), 3)
                    return
                end

                FlagsManager:SafeNotification('Success', string.format('Created config "%s"', name), 3)

                -- Refresh dropdown list
                pcall(function()
                    if FlagsManager.Flags.SaveManager_ConfigurationList then
                        FlagsManager.Flags.SaveManager_ConfigurationList:Refresh(FlagsManager:RefreshConfigList())
                        FlagsManager.Flags.SaveManager_ConfigurationList:Set("")
                    end
                end)
            end,
        },
        {
            Title = "Load Configuration",
            Variant = "Outline",
            Callback = function()
                local name = ""
                pcall(function()
                    name = FlagsManager.Flags.SaveManager_ConfigurationList and FlagsManager.Flags.SaveManager_ConfigurationList.Value or ""
                end)

                if not name or name == "" then
                    FlagsManager:SafeNotification('Error', 'Please select a config to load', 3)
                    return
                end

                local success, err = pcall(function()
                    return FlagsManager:Load(name)
                end)
                
                if not success or not err then
                    FlagsManager:SafeNotification('Error', 'Failed to load config: ' .. tostring(err), 3)
                    return
                end

                FlagsManager:SafeNotification('Success', string.format('Loaded config "%s"', name), 3)
            end,
        },
        {
            Title = "Save Configuration",
            Variant = "Outline",
            Callback = function()
                local name = ""
                pcall(function()
                    name = FlagsManager.Flags.SaveManager_ConfigurationList and FlagsManager.Flags.SaveManager_ConfigurationList.Value or ""
                end)

                if not name or name == "" then
                    FlagsManager:SafeNotification('Error', 'Please select a config to save', 3)
                    return
                end

                local success, err = pcall(function()
                    return FlagsManager:Save(name)
                end)
                
                if not success or not err then
                    FlagsManager:SafeNotification('Error', 'Failed to save config: ' .. tostring(err), 3)
                    return
                end

                FlagsManager:SafeNotification('Success', string.format('Saved config "%s"', name), 3)
            end,
        },
        {
            Title = "Delete Configuration",
            Variant = "Outline",
            Callback = function()
                local name = ""
                pcall(function()
                    name = FlagsManager.Flags.SaveManager_ConfigurationList and FlagsManager.Flags.SaveManager_ConfigurationList.Value or ""
                end)

                if not name or name == "" then
                    FlagsManager:SafeNotification('Error', 'Please select a config to delete', 3)
                    return
                end

                local success, err = pcall(function()
                    return FlagsManager:Delete(name)
                end)
                
                if not success or not err then
                    FlagsManager:SafeNotification('Error', 'Failed to delete config: ' .. tostring(err), 3)
                    return
                end

                FlagsManager:SafeNotification('Success', string.format('Deleted config "%s"', name), 3)

                -- Refresh dropdown list setelah penghapusan
                pcall(function()
                    if FlagsManager.Flags.SaveManager_ConfigurationList then
                        FlagsManager.Flags.SaveManager_ConfigurationList:Refresh(FlagsManager:RefreshConfigList())
                        FlagsManager.Flags.SaveManager_ConfigurationList:Set("")
                    end
                end)
            end,
        },
        {
            Title = "Refresh List",
            Variant = "Outline",
            Callback = function()
                pcall(function()
                    if FlagsManager.Flags.SaveManager_ConfigurationList then
                        FlagsManager.Flags.SaveManager_ConfigurationList:Refresh(FlagsManager:RefreshConfigList())
                        FlagsManager.Flags.SaveManager_ConfigurationList:Set("")
                    end
                end)
                FlagsManager:SafeNotification('Info', 'Configuration list refreshed', 2)
            end,
        },
        {
            Title = "Set Auto Load",
            Variant = "Outline",
            Callback = function()
                local name = ""
                pcall(function()
                    name = FlagsManager.Flags.SaveManager_ConfigurationList and FlagsManager.Flags.SaveManager_ConfigurationList.Value or ""
                end)

                if not name or name == "" then
                    -- Clear auto load
                    pcall(function()
                        FlagsManager:SetAutoLoadConfig("")
                    end)
                    FlagsManager:SafeNotification('Info', 'Auto load config cleared', 3)
                else
                    pcall(function()
                        FlagsManager:SetAutoLoadConfig(name)
                    end)
                    FlagsManager:SafeNotification('Success', string.format('Set auto load config to "%s"', name), 3)
                end
            end,
        }
    }

    -- Tambahkan semua tombol dengan error handling
    for _, buttonConfig in ipairs(buttonConfigs) do
        local button = SafeCreateElement(SaveManagerGroupButton, "Button", buttonConfig)
        if not button then
            warn("Failed to create button: " .. buttonConfig.Title)
        end
    end

    -- Tambahkan informasi Auto Load Config
    local AutoLoadParagraph = SafeCreateElement(ConfigSection, "Paragraph", {
        Title = "Auto Load Config",
        Description = "Current Auto Load: " .. (SaveManager_AutoLoadConfig ~= "" and SaveManager_AutoLoadConfig or "None"),
    })

    -- Auto load config jika ada yang diset
    if SaveManager_AutoLoadConfig ~= "" then
        task.spawn(function()
            task.wait(2) -- Tunggu inisialisasi selesai
            local success, err = pcall(function()
                return FlagsManager:Load(SaveManager_AutoLoadConfig)
            end)
            
            if success and err then
                FlagsManager:SafeNotification('Success', string.format('Auto loaded config "%s"', SaveManager_AutoLoadConfig), 3)
            else
                FlagsManager:SafeNotification('Warning', string.format('Failed to auto load config "%s": %s', SaveManager_AutoLoadConfig, tostring(err)), 3)
            end
        end)
    end

    -- Initialize Anti-AFK by default
    if FlagsManager.Flags.AntiAFK and FlagsManager.Flags.AntiAFK.Value then
        FlagsManager:InitAntiAFK()
    end

    FlagsManager:SafeNotification('Success', 'Save system initialized successfully', 2)
    return true
end

return FlagsManager
