local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/xenlua/Xens/refs/heads/main/ui/Avantrix.lua"))() 
local FlagsManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/xenlua/Xens/refs/heads/main/ui/Flags"))()

local LPH_JIT_MAX = function(...) return(...) end;
local LPH_NO_VIRTUALIZE = function(...) return(...) end;
local LPH_CRASH = function(...) while task.wait() do game:GetService("ScriptContext"):SetTimeout(math.huge);while true do while true do while true do while true do while true do while true do while true do while true do print("noob") end end end end end end end end end end;
local LRM_UserNote = "Owner" -- Debugging Purpose Only
local LRM_ScriptVersion = "v11" -- Debugging Purpose Only
local ClonedPrint = print

if LPH_OBFUSCATED then
    ClonedPrint = print
    print = function(...)end
    warn = function(...)end

    local PreventSkidsToMakeGayThings = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/InfiniX/a40a158d22fd4f4733beb2f67379866ccb17906f/Library/Anti/AntiDebug/main.lua", true))()

    if not (type(PreventSkidsToMakeGayThings) == "table") then
    LPH_CRASH()
    end
end

repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character

if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Gradient function done in FlagsManager

function formatVersion(version)
    local formattedVersion = "v" .. version:sub(2):gsub(".", "%0.") -- Keep 'v' and add dot between digits
    return formattedVersion:sub(1, #formattedVersion - 1) -- Remove last dot
end

local main = lib:Load({
    Title = 'PetaPeta-lvl 6 '..formatVersion(LRM_ScriptVersion)..' | ' .. gradient("Avantrix").. " | ",
    ToggleButton = "rbxassetid://100227182680708",
})

--REQUIRED USE THIS 
local tabs = {
    Main = main:AddTab("Information"),
    ESPTab = main:AddTab("ESP Controls"),
    AutoCollectTab = main:AddTab("Auto Collect"),
    WalkSpeedTab = main:AddTab("WalkSpeed"),
    SettingsTab = main:AddTab("Settings")
}
main:SelectTab()

--REQUIRED USE THIS 
local sections = {
    Welcome = tabs.Main:AddSection({Defualt = true , Locked = true}),
    ESPSection = tabs.ESPTab:AddSection({Title = "üîç ESP Controls", Description = "Control ESP for different object types", Defualt = false, Locked = false}),
    AutoCollectSection = tabs.AutoCollectTab:AddSection({Title = "ü§ñ Auto Collect System", Description = "Automatically collect items within range (includes Zeni)", Defualt = false, Locked = false}),
    WalkSpeedSection = tabs.WalkSpeedTab:AddSection({Title = "üèÉ WalkSpeed Control", Description = "Control player movement speed", Defualt = false, Locked = false}),
    ListRoomSection = tabs.WalkSpeedTab:AddSection({Title = "üè† ListRoom Objects", Description = "Objects that will be detected in rooms", Defualt = false, Locked = false}),
    AppearanceSection = tabs.SettingsTab:AddSection({Title = "üé® ESP Appearance", Description = "Customize ESP appearance settings", Defualt = false, Locked = false}),
    SpawnedItemsSection = tabs.SettingsTab:AddSection({Title = "üì¶ SpawnedItems ESP Settings", Description = "Configure SpawnedItems ESP", Defualt = false, Locked = false}),
    PetaPetaGhostSection = tabs.SettingsTab:AddSection({Title = "üëª Peta Peta Ghost ESP Settings", Description = "Configure Peta Peta Ghost ESP", Defualt = false, Locked = false}),
    GeneralSection = tabs.SettingsTab:AddSection({Title = "üîß General Settings", Description = "General ESP settings and controls", Defualt = false, Locked = false}),
    RoomsSection = tabs.SettingsTab:AddSection({Title = "üè† Rooms ESP Settings", Description = "Configure Rooms ESP", Defualt = false, Locked = false}),
}

-- replaced var's with this for REQUIRED USE THIS 
local var = {}

--DONT DELETE THIS SECTIONS
var.WelcomeParagraph = sections.Welcome:AddParagraph({Title = gradient("Loading..."), Description = "Please wait..\nIf you've been stuck on this for a long time please join our discord and report it.\nYou could also try:\n- Re-execute\n- Rejoin"})

var.WelcomeParagraph:SetTitle(gradient("Welcome!"))
var.WelcomeParagraph:SetDesc([[<font color="rgb(255,255,255)">NEWS:</font>
[+] Updated to use proper Avantrix library structure
[/] Enhanced ESP system with better performance
[/] Fixed UI bug

<b><font color='rgb(255, 255, 255)'>----------------------------------------[Features]--------------------------------------</font></b>

<font color="rgb(255,255,255)">Version:</font> ]] .. formatVersion(LRM_ScriptVersion) .. [[

<font color="rgb(255,255,255)">Features:</font>
‚Ä¢ SpawnedItems ESP with unique colors per item
‚Ä¢ Peta Peta Ghost ESP for enemy detection
‚Ä¢ Rooms ESP for important objects
‚Ä¢ Auto Collect system (includes Zeni items)
‚Ä¢ WalkSpeed modification with sync protection
‚Ä¢ ProximityPrompt modifier (HoldDuration = 0)
‚Ä¢ Advanced ESP settings and customization

<font color="rgb(255,255,255)">Instructions:</font>
1. Enable desired ESP features in ESP Controls tab
2. Configure Auto Collect settings if needed
3. Adjust WalkSpeed in WalkSpeed tab
4. Customize ESP appearance in Settings tab

<font color="rgb(255,255,255)">Discord:</font> discord.gg/cF8YeDPt2G]])

--// ==================== ANTI-DETECTION BYPASS ====================
local function setupBypass()
    if getgenv then
        getgenv().XenonESPActive = true
    end
    
    local oldIndex = getrawmetatable(game).__index
    local oldNewIndex = getrawmetatable(game).__newindex
    
    setreadonly(getrawmetatable(game), false)
    
    getrawmetatable(game).__index = function(self, key)
        if key == "HttpService" and self == game then
            return game:GetService("HttpService")
        end
        return oldIndex(self, key)
    end
    
    getrawmetatable(game).__newindex = function(self, key, value)
        if key == "_G" or key == "shared" then
            return
        end
        return oldNewIndex(self, key, value)
    end
    
    setreadonly(getrawmetatable(game), true)
end

setupBypass()

--// ==================== SERVICES ====================
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local MarketplaceService = game:GetService("MarketplaceService")

--// ==================== VARIABLES ====================
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Remote
local LocalPlayerWalkSpeed = ReplicatedStorage:WaitForChild("LocalPlayerWalkSpeed", 5) -- BindableEvent

-- Room Objects List (MUDAH DITAMBAH - TINGGAL TAMBAH NAMA OBJECT)
local ListRoom = {
    "Safe",
    "HintPaper",
    "DollHouseGimic",
    "Key",
    "TelevisionN"
}

-- Zeni Filter List - Items yang tidak akan di-ESP
local ZeniFilterList = {
    "Zeni_1",
    "Zeni_2", 
    "Zeni_3"
}

-- Function to check if item should be filtered (excluded from ESP)
local function shouldFilterItem(itemName)
    for _, filteredName in pairs(ZeniFilterList) do
        if itemName == filteredName then
            return true
        end
    end
    return false
end

-- Function to check if item is Zeni (for auto collect)
local function isZeniItem(itemName)
    for _, zeniName in pairs(ZeniFilterList) do
        if itemName == zeniName then
            return true
        end
    end
    return false
end

-- ESP Variables with proper state management
local ESPState = {
    SpawnedItemsESPEnabled = false,
    PetaPetaGhostESPEnabled = false,
    RoomsESPEnabled = false,
    ProximityPromptEnabled = false,
    AutoCollectEnabled = false,
    WalkSpeedEnabled = false
}

local ESPConnections = {}
local ESPObjects = {}
local UpdateConnection = nil

-- WalkSpeed Variables
local CurrentWalkSpeed = 14.5
local DefaultWalkSpeed = 14.5
local WalkSpeedConnection = nil
local CharacterConnection = nil

-- ProximityPrompt Variables
local ProximityPromptConnections = {}

-- Auto Collect Variables
local AutoCollectConnections = {}
local AutoCollectRange = 10
local AutoCollectDelay = 0.1

-- Color system for different item names
local ItemColors = {}
local ColorPalette = {
    Color3.fromRGB(0, 255, 0),     -- Green
    Color3.fromRGB(255, 100, 100), -- Red
    Color3.fromRGB(100, 150, 255), -- Blue
    Color3.fromRGB(255, 215, 0),   -- Gold
    Color3.fromRGB(255, 165, 0),   -- Orange
    Color3.fromRGB(147, 112, 219), -- Purple
    Color3.fromRGB(0, 255, 255),   -- Cyan
    Color3.fromRGB(255, 20, 147),  -- Pink
    Color3.fromRGB(50, 205, 50),   -- Lime
    Color3.fromRGB(255, 69, 0),    -- Red Orange
    Color3.fromRGB(138, 43, 226),  -- Blue Violet
    Color3.fromRGB(255, 140, 0),   -- Dark Orange
    Color3.fromRGB(0, 191, 255),   -- Deep Sky Blue
    Color3.fromRGB(255, 105, 180), -- Hot Pink
    Color3.fromRGB(124, 252, 0),   -- Lawn Green
}

-- Function to get color for item name
local function getItemColor(itemName)
    if not ItemColors[itemName] then
        local colorIndex = (#ItemColors % #ColorPalette) + 1
        ItemColors[itemName] = ColorPalette[colorIndex]
    end
    return ItemColors[itemName]
end

-- ESP Settings (OTOMATIS UNTUK SEMUA OBJECT DI LISTROOM)
local ESPSettings = {
    SpawnedItems = {
        Color = Color3.fromRGB(0, 255, 0), -- Default color, will be overridden per item
        Transparency = 0.5,
        TextColor = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        MaxDistance = 1000,
        FixedSize = true, -- FIXED SIZE ENABLED BY DEFAULT
        BaseSize = UDim2.new(0, 120, 0, 40) -- Smaller fixed base size
    },
    PetaPetaGhost = {
        Color = Color3.fromRGB(255, 100, 100),
        Transparency = 0.5,
        TextColor = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        MaxDistance = 1000,
        FixedSize = true,
        BaseSize = UDim2.new(0, 120, 0, 40)
    },
    Rooms = {
        -- OTOMATIS GENERATE SETTINGS UNTUK SEMUA OBJECT DI LISTROOM
        Default = {
            Color = Color3.fromRGB(255, 215, 0),
            Transparency = 0.5,
            TextColor = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            MaxDistance = 1000,
            FixedSize = true,
            BaseSize = UDim2.new(0, 100, 0, 40)
        }
    }
}

-- Auto-generate settings untuk setiap object di ListRoom
for _, objectName in pairs(ListRoom) do
    ESPSettings.Rooms[objectName] = {
        Color = Color3.fromRGB(math.random(100, 255), math.random(100, 255), math.random(100, 255)),
        Transparency = 0.5,
        TextColor = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        MaxDistance = 1000,
        FixedSize = true,
        BaseSize = UDim2.new(0, 80, 0, 40)
    }
end

-- Stats
local Stats = {
    SpawnedItemsFound = 0,
    PetaPetaGhostFound = 0,
    RoomObjectsFound = 0,
    ProximityPromptsModified = 0,
    ItemsAutoCollected = 0,
    ZeniItemsCollected = 0,
    ZeniItemsFiltered = 0,
    LastUpdate = tick()
}

--// ==================== CLEANUP FUNCTIONS ====================
local function cleanupConnections()
    -- Stop all ESP connections
    for connectionName, connection in pairs(ESPConnections) do
        if connection and typeof(connection) == "RBXScriptConnection" then
            connection:Disconnect()
        end
        ESPConnections[connectionName] = nil
    end
    
    -- Stop all ProximityPrompt connections
    for connectionName, connection in pairs(ProximityPromptConnections) do
        if connection and typeof(connection) == "RBXScriptConnection" then
            connection:Disconnect()
        end
        ProximityPromptConnections[connectionName] = nil
    end
    
    -- Stop all AutoCollect connections
    for connectionName, connection in pairs(AutoCollectConnections) do
        if connection then
            if typeof(connection) == "thread" then
                task.cancel(connection)
            elseif typeof(connection) == "RBXScriptConnection" then
                connection:Disconnect()
            end
        end
        AutoCollectConnections[connectionName] = nil
    end
    
    -- Stop update connection
    if UpdateConnection then
        UpdateConnection:Disconnect()
        UpdateConnection = nil
    end
    
    -- Stop WalkSpeed connections
    if WalkSpeedConnection then
        WalkSpeedConnection:Disconnect()
        WalkSpeedConnection = nil
    end
    
    if CharacterConnection then
        CharacterConnection:Disconnect()
        CharacterConnection = nil
    end
    
    -- Clear all ESP objects
    for object, espData in pairs(ESPObjects) do
        if espData.BillboardGui then
            espData.BillboardGui:Destroy()
        end
    end
    ESPObjects = {}
    
    -- Reset all states
    ESPState.SpawnedItemsESPEnabled = false
    ESPState.PetaPetaGhostESPEnabled = false
    ESPState.RoomsESPEnabled = false
    ESPState.ProximityPromptEnabled = false
    ESPState.AutoCollectEnabled = false
    ESPState.WalkSpeedEnabled = false
    
    -- Mark as inactive
    getgenv().XenonESPActive = false
end

--// ==================== AUTO COLLECT FUNCTIONS ====================
local function getPlayerPosition()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return LocalPlayer.Character.HumanoidRootPart.Position
    end
    return nil
end

local function getObjectPosition(object)
    if not object or not object.Parent then return nil end
    
    -- Try different methods to get position
    if object:IsA("Model") then
        -- For models, try PrimaryPart first
        if object.PrimaryPart then
            return object.PrimaryPart.Position
        end
        
        -- Try HumanoidRootPart
        local humanoidRootPart = object:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            return humanoidRootPart.Position
        end
        
        -- Try any Part
        for _, child in pairs(object:GetChildren()) do
            if child:IsA("BasePart") then
                return child.Position
            end
        end
    elseif object:IsA("BasePart") then
        return object.Position
    end
    
    return nil
end

local function findProximityPrompt(object)
    if object:IsA("ProximityPrompt") then
        return object
    end
    
    -- Search in descendants
    for _, descendant in pairs(object:GetDescendants()) do
        if descendant:IsA("ProximityPrompt") then
            return descendant
        end
    end
    
    return nil
end

local function autoCollectItem(item)
    if not ESPState.AutoCollectEnabled or not item or not item.Parent then return end
    
    local playerPos = getPlayerPosition()
    local itemPos = getObjectPosition(item)
    
    if not playerPos or not itemPos then return end
    
    local distance = (playerPos - itemPos).Magnitude
    
    if distance <= AutoCollectRange then
        local proximityPrompt = findProximityPrompt(item)
        if proximityPrompt and proximityPrompt.Enabled then
            -- Fire the proximity prompt
            pcall(function()
                fireproximityprompt(proximityPrompt)
                
                -- Track collection stats
                if isZeniItem(item.Name) then
                    Stats.ZeniItemsCollected = Stats.ZeniItemsCollected + 1
                else
                    Stats.ItemsAutoCollected = Stats.ItemsAutoCollected + 1
                end
            end)
        end
    end
end

local function scanAndAutoCollect()
    if not ESPState.AutoCollectEnabled then return end
    
    local server = Workspace:FindFirstChild("Server")
    if not server then return end
    
    local spawnedItems = server:FindFirstChild("SpawnedItems")
    if not spawnedItems then return end
    
    for _, item in pairs(spawnedItems:GetChildren()) do
        if item and item.Parent then
            -- Auto collect ALL items including Zeni
            autoCollectItem(item)
        end
    end
end

local function startAutoCollect()
    if ESPState.AutoCollectEnabled then return end
    
    ESPState.AutoCollectEnabled = true
    Stats.ItemsAutoCollected = 0
    Stats.ZeniItemsCollected = 0
    
    -- Start auto collect loop
    AutoCollectConnections.CollectLoop = task.spawn(function()
        while ESPState.AutoCollectEnabled and getgenv().XenonESPActive do
            pcall(function()
                scanAndAutoCollect()
            end)
            task.wait(AutoCollectDelay)
        end
    end)
    
    lib:Notification('Auto Collect', '‚úÖ Auto Collect Enabled! Range: ' .. AutoCollectRange .. 'm (includes Zeni)', 3)
end

local function stopAutoCollect()
    if not ESPState.AutoCollectEnabled then return end
    
    ESPState.AutoCollectEnabled = false
    
    -- Stop collect loop
    if AutoCollectConnections.CollectLoop then
        task.cancel(AutoCollectConnections.CollectLoop)
        AutoCollectConnections.CollectLoop = nil
    end
    
    Stats.ItemsAutoCollected = 0
    Stats.ZeniItemsCollected = 0
    lib:Notification('Auto Collect', '‚ùå Auto Collect Disabled!', 3)
end

--// ==================== PROXIMITY PROMPT FUNCTIONS ====================
local function modifyProximityPrompt(prompt)
    if prompt and prompt:IsA("ProximityPrompt") then
        prompt.HoldDuration = 0
        Stats.ProximityPromptsModified = Stats.ProximityPromptsModified + 1
    end
end

local function scanAndModifyProximityPrompts()
    if not ESPState.ProximityPromptEnabled then return end
    
    local server = Workspace:FindFirstChild("Server")
    if not server then return end
    
    -- Scan SpawnedItems
    local spawnedItems = server:FindFirstChild("SpawnedItems")
    if spawnedItems then
        for _, item in pairs(spawnedItems:GetDescendants()) do
            if item:IsA("ProximityPrompt") then
                modifyProximityPrompt(item)
            end
        end
    end
    
    -- Scan Rooms
    local mapGenerated = server:FindFirstChild("MapGenerated")
    if mapGenerated then
        local rooms = mapGenerated:FindFirstChild("Rooms")
        if rooms then
            for _, room in pairs(rooms:GetDescendants()) do
                if room:IsA("ProximityPrompt") then
                    modifyProximityPrompt(room)
                end
            end
        end
    end
end

local function startProximityPromptModifier()
    if ESPState.ProximityPromptEnabled then return end
    
    ESPState.ProximityPromptEnabled = true
    Stats.ProximityPromptsModified = 0
    
    -- Initial scan
    scanAndModifyProximityPrompts()
    
    -- Set up connections for new ProximityPrompts
    local server = Workspace:FindFirstChild("Server")
    if server then
        -- Monitor SpawnedItems
        local spawnedItems = server:FindFirstChild("SpawnedItems")
        if spawnedItems then
            ProximityPromptConnections.SpawnedItemsAdded = spawnedItems.DescendantAdded:Connect(function(descendant)
                if ESPState.ProximityPromptEnabled and descendant:IsA("ProximityPrompt") then
                    task.wait(0.1) -- Small delay to ensure object is fully loaded
                    modifyProximityPrompt(descendant)
                end
            end)
        end
        
        -- Monitor Rooms
        local mapGenerated = server:FindFirstChild("MapGenerated")
        if mapGenerated then
            local rooms = mapGenerated:FindFirstChild("Rooms")
            if rooms then
                ProximityPromptConnections.RoomsAdded = rooms.DescendantAdded:Connect(function(descendant)
                    if ESPState.ProximityPromptEnabled and descendant:IsA("ProximityPrompt") then
                        task.wait(0.1) -- Small delay to ensure object is fully loaded
                        modifyProximityPrompt(descendant)
                    end
                end)
            end
        end
    end
    
    lib:Notification('Modifier', '‚úÖ Modifier HoldDuration 0 Enabled!', 3)
end

local function stopProximityPromptModifier()
    if not ESPState.ProximityPromptEnabled then return end
    
    ESPState.ProximityPromptEnabled = false
    
    -- Disconnect connections
    for connectionName, connection in pairs(ProximityPromptConnections) do
        if connection then
            connection:Disconnect()
            ProximityPromptConnections[connectionName] = nil
        end
    end
    
    Stats.ProximityPromptsModified = 0
    lib:Notification('Modifier HoldDuration 0', '‚ùå Modifier HoldDuration 0 Disabled!', 3)
end

--// ==================== WALKSPEED SYNC DETECTION ====================
local function setupWalkSpeedSync()
    -- Disconnect existing connections
    if WalkSpeedConnection then
        WalkSpeedConnection:Disconnect()
        WalkSpeedConnection = nil
    end
    
    -- Check if LocalPlayer has character and humanoid
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") then
        return false
    end
    
    local humanoid = LocalPlayer.Character.Humanoid
    
    -- Monitor WalkSpeed changes in LocalPlayer.Character.Humanoid
    WalkSpeedConnection = humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        if ESPState.WalkSpeedEnabled and humanoid then
            local currentSpeed = humanoid.WalkSpeed
            
            -- If the WalkSpeed was changed externally and doesn't match our setting
            if math.abs(currentSpeed - CurrentWalkSpeed) > 0.1 then
                -- Sync it back to our desired speed
                humanoid.WalkSpeed = CurrentWalkSpeed
            end
        end
    end)
    
    return true
end

local function onCharacterAdded(character)
    -- Wait for humanoid to be added
    local humanoid = character:WaitForChild("Humanoid", 5)
    if humanoid and ESPState.WalkSpeedEnabled then
        -- Setup sync for new character
        task.wait(0.1) -- Small delay to ensure everything is loaded
        setupWalkSpeedSync()
        
        -- Apply current walkspeed to new character
        humanoid.WalkSpeed = CurrentWalkSpeed
        lib:Notification('WalkSpeed', 'üîÑ WalkSpeed applied to new character: ' .. CurrentWalkSpeed, 3)
    end
end

--// ==================== WALKSPEED FUNCTIONS ====================
local function setWalkSpeed(speed)
    if ESPState.WalkSpeedEnabled then
        CurrentWalkSpeed = speed
        
        -- Set via RemoteEvent if available
        if LocalPlayerWalkSpeed then
            pcall(function()
                LocalPlayerWalkSpeed:Fire(speed)
            end)
        end
        
        -- Set directly to LocalPlayer.Character.Humanoid if available
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = speed
        end
    end
end

local function enableWalkSpeed()
    ESPState.WalkSpeedEnabled = true
    
    -- Setup character connection for respawning
    if CharacterConnection then
        CharacterConnection:Disconnect()
    end
    CharacterConnection = LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
    
    -- Setup sync monitoring for current character
    if not setupWalkSpeedSync() then
        -- Retry finding character after a short delay
        task.spawn(function()
            task.wait(1)
            setupWalkSpeedSync()
        end)
    end
    
    setWalkSpeed(CurrentWalkSpeed)
    lib:Notification('WalkSpeed', 'üèÉ WalkSpeed Enabled: ' .. CurrentWalkSpeed, 3)
end

local function disableWalkSpeed()
    ESPState.WalkSpeedEnabled = false
    
    -- Disconnect sync monitoring
    if WalkSpeedConnection then
        WalkSpeedConnection:Disconnect()
        WalkSpeedConnection = nil
    end
    
    -- Disconnect character connection
    if CharacterConnection then
        CharacterConnection:Disconnect()
        CharacterConnection = nil
    end
    
    -- Reset to default
    if LocalPlayerWalkSpeed then
        pcall(function()
            LocalPlayerWalkSpeed:Fire(DefaultWalkSpeed)
        end)
    end
    
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = DefaultWalkSpeed
    end
    
    lib:Notification('WalkSpeed', '‚èπÔ∏è WalkSpeed Disabled (Reset to ' .. DefaultWalkSpeed .. ')', 2)
end

--// ==================== ESP FUNCTIONS ====================

-- Get best part for ESP attachment
local function getBestPartForESP(object)
    if not object or not object.Parent then return nil end
    
    if object:IsA("Model") then
        -- For models, try PrimaryPart first
        if object.PrimaryPart then
            return object.PrimaryPart
        end
        
        -- Try HumanoidRootPart
        local humanoidRootPart = object:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            return humanoidRootPart
        end
        
        -- Try any Part
        for _, child in pairs(object:GetChildren()) do
            if child:IsA("BasePart") then
                return child
            end
        end
    elseif object:IsA("BasePart") then
        return object
    end
    
    return nil
end

-- FIXED: Calculate ESP size based on distance (PROPER SCALING)
local function calculateESPSize(distance, settings)
    if settings.FixedSize then
        -- ALWAYS USE FIXED SIZE - NO SCALING
        return settings.BaseSize
    else
        -- PROPER DISTANCE-BASED SCALING: CLOSE = BIG, FAR = SMALL
        local minDistance = 20  -- Minimum distance for scaling
        local maxDistance = 300 -- Maximum distance for scaling
        
        -- Clamp distance to prevent extreme scaling
        distance = math.max(minDistance, math.min(maxDistance, distance))
        
        -- FIXED FORMULA: Inverse relationship with distance
        -- Close objects (small distance) = large scale factor
        -- Far objects (large distance) = small scale factor
        local scaleFactor = math.max(0.3, math.min(2.0, minDistance / distance))
        
        -- Apply scale to base size
        local newWidth = math.floor(settings.BaseSize.X.Offset * scaleFactor)
        local newHeight = math.floor(settings.BaseSize.Y.Offset * scaleFactor)
        
        return UDim2.new(0, newWidth, 0, newHeight)
    end
end

-- Create ESP for an object (ENHANCED WITH PROPER COLOR DIFFERENTIATION)
local function createESP(object, espType, name, subType)
    if not object or not object.Parent then return end
    
    local settings
    local itemColor
    
    if espType == "Rooms" then
        settings = ESPSettings.Rooms[subType] or ESPSettings.Rooms.Default
        itemColor = settings.Color
    elseif espType == "SpawnedItems" then
        settings = ESPSettings.SpawnedItems
        -- FIXED: Get unique color for this specific item name
        itemColor = getItemColor(object.Name)
    else
        settings = ESPSettings[espType]
        itemColor = settings.Color
    end
    
    if not settings then return end
    
    -- Get the best part to attach ESP to
    local attachPart = getBestPartForESP(object)
    if not attachPart then return end
    
    -- Calculate initial distance for size
    local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local distance = 100 -- Default distance
    if playerPosition then
        local objectPosition = getObjectPosition(object)
        if objectPosition then
            distance = (playerPosition.Position - objectPosition).Magnitude
        end
    end
    
    -- Create BillboardGui with FIXED SIZE (no scaling by default)
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "XenonESP_" .. espType .. (subType and "_" .. subType or "")
    billboardGui.Adornee = attachPart
    billboardGui.Size = calculateESPSize(distance, settings)
    billboardGui.StudsOffset = Vector3.new(0, 0, 0)
    billboardGui.AlwaysOnTop = true
    billboardGui.LightInfluence = 0
    billboardGui.Parent = attachPart
    
    -- Create Frame with item-specific color
    local frame = Instance.new("Frame")
    frame.Name = "ESPFrame"
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundColor3 = itemColor
    frame.BackgroundTransparency = settings.Transparency
    frame.BorderSizePixel = 0
    frame.Parent = billboardGui
    
    -- Create UICorner
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    
    -- Create UIStroke with item-specific color
    local stroke = Instance.new("UIStroke")
    stroke.Color = itemColor
    stroke.Thickness = 2
    stroke.Parent = frame
    
    -- Create TextLabel
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "ESPText"
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = name or object.Name
    textLabel.TextColor3 = settings.TextColor
    textLabel.TextSize = settings.TextSize
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Font = Enum.Font.GothamBold
    textLabel.TextScaled = true
    textLabel.Parent = frame
    
    -- Add item type indicator for SpawnedItems
    if espType == "SpawnedItems" then
        local typeIndicator = Instance.new("Frame")
        typeIndicator.Name = "TypeIndicator"
        typeIndicator.Size = UDim2.new(0, 8, 0, 8)
        typeIndicator.Position = UDim2.new(1, -12, 0, 4)
        typeIndicator.BackgroundColor3 = itemColor
        typeIndicator.BorderSizePixel = 0
        typeIndicator.Parent = frame
        
        local indicatorCorner = Instance.new("UICorner")
        indicatorCorner.CornerRadius = UDim.new(0, 4)
        indicatorCorner.Parent = typeIndicator
    end
    
    -- Store ESP object
    ESPObjects[object] = {
        BillboardGui = billboardGui,
        AttachPart = attachPart,
        Type = espType,
        SubType = subType,
        Name = name or object.Name,
        LastPosition = getObjectPosition(object),
        ItemColor = itemColor,
        Settings = settings
    }
    
    return billboardGui
end

-- Remove ESP from an object
local function removeESP(object)
    if ESPObjects[object] then
        if ESPObjects[object].BillboardGui then
            ESPObjects[object].BillboardGui:Destroy()
        end
        ESPObjects[object] = nil
    end
end

-- Clear all ESP
local function clearAllESP()
    for object, espData in pairs(ESPObjects) do
        if espData.BillboardGui then
            espData.BillboardGui:Destroy()
        end
    end
    ESPObjects = {}
end

-- Update ESP visibility and position (FIXED SIZE SCALING)
local function updateESPVisibility()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local playerPosition = LocalPlayer.Character.HumanoidRootPart.Position
    
    for object, espData in pairs(ESPObjects) do
        if object and object.Parent and espData.BillboardGui then
            local objectPosition = getObjectPosition(object)
            
            if objectPosition then
                local distance = (playerPosition - objectPosition).Magnitude
                local settings = espData.Settings
                
                -- Update ESP attachment if object moved significantly
                local currentAttachPart = getBestPartForESP(object)
                if currentAttachPart and currentAttachPart ~= espData.AttachPart then
                    espData.BillboardGui.Adornee = currentAttachPart
                    espData.AttachPart = currentAttachPart
                end
                
                if distance <= settings.MaxDistance then
                    espData.BillboardGui.Enabled = true
                    
                    -- ONLY UPDATE SIZE IF NOT FIXED SIZE
                    if not settings.FixedSize then
                        espData.BillboardGui.Size = calculateESPSize(distance, settings)
                    end
                    
                    -- Update distance in text
                    local textLabel = espData.BillboardGui:FindFirstChild("ESPFrame")
                    if textLabel then
                        textLabel = textLabel:FindFirstChild("ESPText")
                        if textLabel then
                            textLabel.Text = espData.Name .. "\n[" .. math.floor(distance) .. "m]"
                        end
                    end
                else
                    espData.BillboardGui.Enabled = false
                end
                
                espData.LastPosition = objectPosition
            else
                -- Object might be invalid, hide ESP
                espData.BillboardGui.Enabled = false
            end
        else
            -- Clean up invalid objects
            if espData.BillboardGui then
                espData.BillboardGui:Destroy()
            end
            ESPObjects[object] = nil
        end
    end
end

-- Scan for SpawnedItems (ENHANCED WITH ZENI FILTER)
local function scanSpawnedItems()
    if not ESPState.SpawnedItemsESPEnabled then return end
    
    local server = Workspace:FindFirstChild("Server")
    if not server then return end
    
    local spawnedItems = server:FindFirstChild("SpawnedItems")
    if not spawnedItems then return end
    
    local count = 0
    local filteredCount = 0
    
    for _, item in pairs(spawnedItems:GetChildren()) do
        if item and item.Parent then
            -- Check if item should be filtered (Zeni items)
            if shouldFilterItem(item.Name) then
                filteredCount = filteredCount + 1
                -- Remove ESP if it exists for filtered items
                if ESPObjects[item] then
                    removeESP(item)
                end
            elseif not ESPObjects[item] then
                -- Only create ESP for non-filtered items
                createESP(item, "SpawnedItems", item.Name)
                count = count + 1
            end
        end
    end
    
    Stats.SpawnedItemsFound = #spawnedItems:GetChildren() - filteredCount
    Stats.ZeniItemsFiltered = filteredCount
end

-- Scan for Peta Peta Ghost (renamed from Enemy)
local function scanPetaPetaGhost()
    if not ESPState.PetaPetaGhostESPEnabled then return end
    
    local server = Workspace:FindFirstChild("Client")
    if not server then return end
    
    local enemies = server:FindFirstChild("Enemy")
    if not enemies then return end
    
    local count = 0
    for _, ghost in pairs(enemies:GetChildren()) do
        if ghost and ghost.Parent and not ESPObjects[ghost] then
            createESP(ghost, "PetaPetaGhost", "Peta Peta Ghost")
            count = count + 1
        end
    end
    
    Stats.PetaPetaGhostFound = #enemies:GetChildren()
end

-- SIMPLIFIED Scan for Rooms - OTOMATIS UNTUK SEMUA OBJECT DI LISTROOM
local function scanRooms()
    if not ESPState.RoomsESPEnabled then return end
    
    local server = Workspace:FindFirstChild("Server")
    if not server then return end
    
    local mapGenerated = server:FindFirstChild("MapGenerated")
    if not mapGenerated then return end
    
    local rooms = mapGenerated:FindFirstChild("Rooms")
    if not rooms then return end
    
    local totalFound = 0
    
    -- Scan all rooms for objects in ListRoom
    for _, room in pairs(rooms:GetChildren()) do
        if room and room.Parent then
            for _, child in pairs(room:GetDescendants()) do
                -- OTOMATIS CEK SEMUA OBJECT DI LISTROOM
                for _, objectName in pairs(ListRoom) do
                    local shouldCreateESP = false
                    local displayName = ""
                    
                    -- SIMPLE CHECK - TINGGAL NAMA OBJECT SAJA
                    if child.Name == objectName and not ESPObjects[child] then
                        shouldCreateESP = true
                        displayName = objectName .. " (" .. room.Name .. ")"
                    end
                    
                    if shouldCreateESP then
                        createESP(child, "Rooms", displayName, objectName)
                        totalFound = totalFound + 1
                    end
                end
            end
        end
    end
    
    Stats.RoomObjectsFound = totalFound
end

-- Start SpawnedItems ESP
local function startSpawnedItemsESP()
    if ESPState.SpawnedItemsESPEnabled then return end
    
    ESPState.SpawnedItemsESPEnabled = true
    
    -- Initial scan
    scanSpawnedItems()
    
    -- Set up connection for new items
    local server = Workspace:FindFirstChild("Server")
    if server then
        local spawnedItems = server:FindFirstChild("SpawnedItems")
        if spawnedItems then
            ESPConnections.SpawnedItemsAdded = spawnedItems.ChildAdded:Connect(function(child)
                if ESPState.SpawnedItemsESPEnabled and getgenv().XenonESPActive then
                    task.wait(0.1) -- Small delay to ensure object is fully loaded
                    
                    -- Check if item should be filtered
                    if not shouldFilterItem(child.Name) then
                        createESP(child, "SpawnedItems", child.Name)
                        Stats.SpawnedItemsFound = Stats.SpawnedItemsFound + 1
                    else
                        Stats.ZeniItemsFiltered = Stats.ZeniItemsFiltered + 1
                    end
                end
            end)
            
            ESPConnections.SpawnedItemsRemoved = spawnedItems.ChildRemoved:Connect(function(child)
                if shouldFilterItem(child.Name) then
                    Stats.ZeniItemsFiltered = math.max(0, Stats.ZeniItemsFiltered - 1)
                else
                    removeESP(child)
                    Stats.SpawnedItemsFound = math.max(0, Stats.SpawnedItemsFound - 1)
                end
            end)
        end
    end
    
    lib:Notification('SpawnedItems ESP', '‚úÖ SpawnedItems ESP Enabled! (Zeni items filtered)', 3)
end

-- Stop SpawnedItems ESP
local function stopSpawnedItemsESP()
    if not ESPState.SpawnedItemsESPEnabled then return end
    
    ESPState.SpawnedItemsESPEnabled = false
    
    -- Remove all SpawnedItems ESP
    for object, espData in pairs(ESPObjects) do
        if espData.Type == "SpawnedItems" then
            removeESP(object)
        end
    end
    
    -- Disconnect connections
    if ESPConnections.SpawnedItemsAdded then
        ESPConnections.SpawnedItemsAdded:Disconnect()
        ESPConnections.SpawnedItemsAdded = nil
    end
    
    if ESPConnections.SpawnedItemsRemoved then
        ESPConnections.SpawnedItemsRemoved:Disconnect()
        ESPConnections.SpawnedItemsRemoved = nil
    end
    
    Stats.SpawnedItemsFound = 0
    Stats.ZeniItemsFiltered = 0
    lib:Notification('SpawnedItems ESP', '‚ùå SpawnedItems ESP Disabled!', 3)
end

-- Start Peta Peta Ghost ESP
local function startPetaPetaGhostESP()
    if ESPState.PetaPetaGhostESPEnabled then return end
    
    ESPState.PetaPetaGhostESPEnabled = true
    
    -- Initial scan
    scanPetaPetaGhost()
    
    -- Set up connection for new ghosts
    local server = Workspace:FindFirstChild("Client")
    if server then
        local enemies = server:FindFirstChild("Enemy")
        if enemies then
            ESPConnections.PetaPetaGhostAdded = enemies.ChildAdded:Connect(function(child)
                if ESPState.PetaPetaGhostESPEnabled and getgenv().XenonESPActive then
                    task.wait(0.1) -- Small delay to ensure object is fully loaded
                    createESP(child, "PetaPetaGhost", "Peta Peta Ghost")
                    Stats.PetaPetaGhostFound = Stats.PetaPetaGhostFound + 1
                end
            end)
            
            ESPConnections.PetaPetaGhostRemoved = enemies.ChildRemoved:Connect(function(child)
                removeESP(child)
                Stats.PetaPetaGhostFound = math.max(0, Stats.PetaPetaGhostFound - 1)
            end)
        end
    end
    
    lib:Notification('Peta Peta Ghost ESP', '‚úÖ Peta Peta Ghost ESP Enabled!', 3)
end

-- Stop Peta Peta Ghost ESP
local function stopPetaPetaGhostESP()
    if not ESPState.PetaPetaGhostESPEnabled then return end
    
    ESPState.PetaPetaGhostESPEnabled = false
    
    -- Remove all Peta Peta Ghost ESP
    for object, espData in pairs(ESPObjects) do
        if espData.Type == "PetaPetaGhost" then
            removeESP(object)
        end
    end
    
    -- Disconnect connections
    if ESPConnections.PetaPetaGhostAdded then
        ESPConnections.PetaPetaGhostAdded:Disconnect()
        ESPConnections.PetaPetaGhostAdded = nil
    end
    
    if ESPConnections.PetaPetaGhostRemoved then
        ESPConnections.PetaPetaGhostRemoved:Disconnect()
        ESPConnections.PetaPetaGhostRemoved = nil
    end
    
    Stats.PetaPetaGhostFound = 0
    lib:Notification('Peta Peta Ghost ESP', '‚ùå Peta Peta Ghost ESP Disabled!', 3)
end

-- Start Rooms ESP
local function startRoomsESP()
    if ESPState.RoomsESPEnabled then return end
    
    ESPState.RoomsESPEnabled = true
    
    -- Initial scan
    scanRooms()
    
    -- Set up connections for new rooms and objects
    local server = Workspace:FindFirstChild("Server")
    if server then
        local mapGenerated = server:FindFirstChild("MapGenerated")
        if mapGenerated then
            local rooms = mapGenerated:FindFirstChild("Rooms")
            if rooms then
                -- Connection for new rooms
                ESPConnections.RoomsAdded = rooms.ChildAdded:Connect(function(room)
                    if ESPState.RoomsESPEnabled and getgenv().XenonESPActive then
                        task.wait(0.1)
                        -- Scan new room for objects in ListRoom
                        for _, child in pairs(room:GetDescendants()) do
                            for _, objectName in pairs(ListRoom) do
                                if child.Name == objectName and not ESPObjects[child] then
                                    local displayName = objectName .. " (" .. room.Name .. ")"
                                    createESP(child, "Rooms", displayName, objectName)
                                    Stats.RoomObjectsFound = Stats.RoomObjectsFound + 1
                                end
                            end
                        end
                    end
                end)
                
                -- Connection for removed rooms
                ESPConnections.RoomsRemoved = rooms.ChildRemoved:Connect(function(room)
                    -- Remove ESP for objects in removed room
                    for object, espData in pairs(ESPObjects) do
                        if espData.Type == "Rooms" and object:IsDescendantOf(room) then
                            removeESP(object)
                            Stats.RoomObjectsFound = math.max(0, Stats.RoomObjectsFound - 1)
                        end
                    end
                end)
            end
        end
    end
    
    lib:Notification('Rooms ESP', '‚úÖ Rooms ESP Enabled!', 3)
end

-- Stop Rooms ESP
local function stopRoomsESP()
    if not ESPState.RoomsESPEnabled then return end
    
    ESPState.RoomsESPEnabled = false
    
    -- Remove all Rooms ESP
    for object, espData in pairs(ESPObjects) do
        if espData.Type == "Rooms" then
            removeESP(object)
        end
    end
    
    -- Disconnect connections
    if ESPConnections.RoomsAdded then
        ESPConnections.RoomsAdded:Disconnect()
        ESPConnections.RoomsAdded = nil
    end
    
    if ESPConnections.RoomsRemoved then
        ESPConnections.RoomsRemoved:Disconnect()
        ESPConnections.RoomsRemoved = nil
    end
    
    Stats.RoomObjectsFound = 0
    lib:Notification('Rooms ESP', '‚ùå Rooms ESP Disabled!', 3)
end

--// ==================== ESP TAB ====================

-- SpawnedItems ESP Toggle
var.SpawnedItemsESPToggle = sections.ESPSection:AddToggle("SpawnedItemsESP", {
    Title = "üì¶ SpawnedItems ESP",
    Default = false,
    Description = "Show ESP for all items in SpawnedItems with unique colors (Zeni items filtered)",
    Callback = function(enabled)
        if enabled then
            startSpawnedItemsESP()
        else
            stopSpawnedItemsESP()
        end
    end,
})

-- Peta Peta Ghost ESP Toggle
var.PetaPetaGhostESPToggle = sections.ESPSection:AddToggle("PetaPetaGhostESP", {
    Title = "üëª Peta Peta Ghost ESP",
    Default = false,
    Description = "Show ESP for Peta Peta Ghost",
    Callback = function(enabled)
        if enabled then
            startPetaPetaGhostESP()
        else
            stopPetaPetaGhostESP()
        end
    end,
})

-- Rooms ESP Toggle
var.RoomsESPToggle = sections.ESPSection:AddToggle("RoomsESP", {
    Title = "üè† Rooms ESP",
    Default = false,
    Description = "Show ESP for objects in ListRoom",
    Callback = function(enabled)
        if enabled then
            startRoomsESP()
        else
            stopRoomsESP()
        end
    end,
})

-- ProximityPrompt Toggle
var.ProximityPromptToggle = sections.ESPSection:AddToggle("ProximityPromptModifier", {
    Title = "‚ö° Modifier Hold Duration",
    Default = false,
    Description = "Set HoldDuration to 0 for all",
    Callback = function(enabled)
        if enabled then
            startProximityPromptModifier()
        else
            stopProximityPromptModifier()
        end
    end,
})

--// ==================== AUTO COLLECT TAB ====================

-- Auto Collect Toggle
var.AutoCollectToggle = sections.AutoCollectSection:AddToggle("AutoCollectEnabled", {
    Title = "ü§ñ Enable Auto Collect",
    Default = false,
    Description = "Automatically collect ALL items within range (includes Zeni items)",
    Callback = function(enabled)
        if enabled then
            startAutoCollect()
        else
            stopAutoCollect()
        end
    end,
})

-- Auto Collect Range Slider (1-20 range)
var.AutoCollectRangeSlider = sections.AutoCollectSection:AddSlider("AutoCollectRange", {
    Title = "Auto Collect Range",
    Description = "Range in studs for auto collecting items (1-10 studs) Recommended 7",
    Default = 7,
    Min = 1,
    Max = 10,
    Increment = 1,
    Callback = function(value)
        AutoCollectRange = value
    end,
})

-- Auto Collect Delay Slider
var.AutoCollectDelaySlider = sections.AutoCollectSection:AddSlider("AutoCollectDelay", {
    Title = "Auto Collect Delay",
    Description = "Delay between collection attempts (seconds)",
    Default = 0.1,
    Min = 0.05,
    Max = 1.0,
    Increment = 0.05,
    Callback = function(value)
        AutoCollectDelay = value
    end,
})

--// ==================== WALKSPEED TAB ====================

-- WalkSpeed Toggle
var.WalkSpeedToggle = sections.WalkSpeedSection:AddToggle("WalkSpeedEnabled", {
    Title = "Enable WalkSpeed",
    Default = false,
    Description = "Enable/Disable WalkSpeed modification",
    Callback = function(enabled)
        if enabled then
            enableWalkSpeed()
        else
            disableWalkSpeed()
        end
    end,
})

-- WalkSpeed Slider
var.WalkSpeedSlider = sections.WalkSpeedSection:AddSlider("WalkSpeedValue", {
    Title = "WalkSpeed Value",
    Description = "Set your walking speed",
    Default = 14.5,
    Min = 1,
    Max = 50,
    Increment = 0.5,
    Callback = function(value)
        CurrentWalkSpeed = value
        if ESPState.WalkSpeedEnabled then
            setWalkSpeed(value)
        end
    end,
})

-- Reset Button
var.WalkSpeedResetButton = sections.WalkSpeedSection:AddButton({
    Title = "Reset to Default",
    Callback = function()
        CurrentWalkSpeed = DefaultWalkSpeed
        var.WalkSpeedSlider:SetValue(DefaultWalkSpeed)
        if ESPState.WalkSpeedEnabled then
            setWalkSpeed(DefaultWalkSpeed)
            lib:Notification('WalkSpeed', 'üîÑ WalkSpeed reset to ' .. DefaultWalkSpeed, 2)
        else
            lib:Notification('WalkSpeed', 'üîÑ WalkSpeed value reset to ' .. DefaultWalkSpeed .. ' (Enable to apply)', 2)
        end
    end,
})

-- ListRoom Info Section

local listRoomText = "Current ListRoom Objects:\n"
for i, objectName in pairs(ListRoom) do
    listRoomText = listRoomText .. i .. ". " .. objectName .. "\n"
end

var.ListRoomParagraph = sections.ListRoomSection:AddParagraph({Title = "Room Objects List", Description = listRoomText})

--// ==================== SETTINGS TAB ====================

-- Fixed ESP Size Toggle
var.FixedESPSizeToggle = sections.AppearanceSection:AddToggle("FixedESPSize", {
    Title = "Fixed ESP Size",
    Default = true,
    Description = "Keep ESP size constant regardless of distance (RECOMMENDED)",
    Callback = function(enabled)
        ESPSettings.SpawnedItems.FixedSize = enabled
        ESPSettings.PetaPetaGhost.FixedSize = enabled
        ESPSettings.Rooms.Default.FixedSize = enabled
        
        for _, objectName in pairs(ListRoom) do
            ESPSettings.Rooms[objectName].FixedSize = enabled
        end
        
        lib:Notification('ESP Settings', 'üìè Fixed ESP Size: ' .. (enabled and "Enabled (Recommended)" or "Disabled"), 2)
    end,
})

-- SpawnedItems Settings

var.SpawnedItemsMaxDistanceSlider = sections.SpawnedItemsSection:AddSlider("SpawnedItemsMaxDistance", {
    Title = "Max Distance (SpawnedItems)",
    Description = "Maximum distance to show SpawnedItems ESP",
    Default = 100,
    Min = 50,
    Max = 200,
    Increment = 1,
    Callback = function(value)
        ESPSettings.SpawnedItems.MaxDistance = value
    end,
})

var.SpawnedItemsTextSizeSlider = sections.SpawnedItemsSection:AddSlider("SpawnedItemsTextSize", {
    Title = "Text Size (SpawnedItems)",
    Description = "Text size for SpawnedItems ESP",
    Default = 14,
    Min = 10,
    Max = 24,
    Increment = 1,
    Callback = function(value)
        ESPSettings.SpawnedItems.TextSize = value
        -- Update existing ESP text size
        for object, espData in pairs(ESPObjects) do
            if espData.Type == "SpawnedItems" and espData.BillboardGui then
                local textLabel = espData.BillboardGui:FindFirstChild("ESPFrame")
                if textLabel then
                    textLabel = textLabel:FindFirstChild("ESPText")
                    if textLabel then
                        textLabel.TextSize = value
                    end
                end
            end
        end
    end,
})

-- Peta Peta Ghost Settings

var.PetaPetaGhostMaxDistanceSlider = sections.PetaPetaGhostSection:AddSlider("PetaPetaGhostMaxDistance", {
    Title = "Max Distance (Peta Peta Ghost)",
    Description = "Maximum distance to show Peta Peta Ghost ESP",
    Default = 100,
    Min = 50,
    Max = 200,
    Increment = 1,
    Callback = function(value)
        ESPSettings.PetaPetaGhost.MaxDistance = value
    end,
})

var.PetaPetaGhostTextSizeSlider = sections.PetaPetaGhostSection:AddSlider("PetaPetaGhostTextSize", {
    Title = "Text Size (Peta Peta Ghost)",
    Description = "Text size for Peta Peta Ghost ESP",
    Default = 14,
    Min = 10,
    Max = 24,
    Increment = 1,
    Callback = function(value)
        ESPSettings.PetaPetaGhost.TextSize = value
        -- Update existing ESP text size
        for object, espData in pairs(ESPObjects) do
            if espData.Type == "PetaPetaGhost" and espData.BillboardGui then
                local textLabel = espData.BillboardGui:FindFirstChild("ESPFrame")
                if textLabel then
                    textLabel = textLabel:FindFirstChild("ESPText")
                    if textLabel then
                        textLabel.TextSize = value
                    end
                end
            end
        end
    end,
})

-- Rooms Settings

var.RoomsMaxDistanceSlider = sections.RoomsSection:AddSlider("RoomsMaxDistance", {
    Title = "Max Distance (Rooms)",
    Description = "Maximum distance to show Rooms ESP",
    Default = 100,
    Min = 50,
    Max = 200,
    Increment = 1,
    Callback = function(value)
        -- Update all room object settings
        for _, objectName in pairs(ListRoom) do
            ESPSettings.Rooms[objectName].MaxDistance = value
        end
        ESPSettings.Rooms.Default.MaxDistance = value
    end,
})

var.RoomsTextSizeSlider = sections.RoomsSection:AddSlider("RoomsTextSize", {
    Title = "Text Size (Rooms)",
    Description = "Text size for Rooms ESP",
    Default = 14,
    Min = 10,
    Max = 24,
    Increment = 1,
    Callback = function(value)
        -- Update all room object settings
        for _, objectName in pairs(ListRoom) do
            ESPSettings.Rooms[objectName].TextSize = value
        end
        ESPSettings.Rooms.Default.TextSize = value
        -- Update existing ESP text size
        for object, espData in pairs(ESPObjects) do
            if espData.Type == "Rooms" and espData.BillboardGui then
                local textLabel = espData.BillboardGui:FindFirstChild("ESPFrame")
                if textLabel then
                    textLabel = textLabel:FindFirstChild("ESPText")
                    if textLabel then
                        textLabel.TextSize = value
                    end
                end
            end
        end
    end,
})

-- General Settings

var.ResetSettingsButton = sections.GeneralSection:AddButton({
    Title = "üîÑ Reset Settings",
    Callback = function()
        ESPSettings.SpawnedItems.MaxDistance = 1000
        ESPSettings.SpawnedItems.TextSize = 14
        ESPSettings.SpawnedItems.FixedSize = true
        ESPSettings.PetaPetaGhost.MaxDistance = 1000
        ESPSettings.PetaPetaGhost.TextSize = 14
        ESPSettings.PetaPetaGhost.FixedSize = true
        for _, objectName in pairs(ListRoom) do
            ESPSettings.Rooms[objectName].MaxDistance = 1000
            ESPSettings.Rooms[objectName].TextSize = 14
            ESPSettings.Rooms[objectName].FixedSize = true
        end
        ESPSettings.Rooms.Default.MaxDistance = 1000
        ESPSettings.Rooms.Default.TextSize = 14
        ESPSettings.Rooms.Default.FixedSize = true
        
        -- Reset UI elements
        var.SpawnedItemsMaxDistanceSlider:SetValue(100)
        var.SpawnedItemsTextSizeSlider:SetValue(14)
        var.PetaPetaGhostMaxDistanceSlider:SetValue(100)
        var.PetaPetaGhostTextSizeSlider:SetValue(14)
        var.RoomsMaxDistanceSlider:SetValue(100)
        var.RoomsTextSizeSlider:SetValue(14)
        var.FixedESPSizeToggle:SetValue(true)
        
        lib:Notification('ESP Settings', 'üîÑ Settings reset to default!', 2)
    end,
})

var.ClearAllESPButton = sections.GeneralSection:AddButton({
    Title = "üßπ Clear All ESP",
    Callback = function()
        clearAllESP()
        stopSpawnedItemsESP()
        stopPetaPetaGhostESP()
        stopRoomsESP()
        
        -- Reset toggles
        var.SpawnedItemsESPToggle:SetValue(false)
        var.PetaPetaGhostESPToggle:SetValue(false)
        var.RoomsESPToggle:SetValue(false)
        
        lib:Notification('ESP Settings', 'üßπ All ESP cleared and disabled!', 2)
    end,
})

--// ==================== CONFIG SYSTEM ====================
FlagsManager:SetLibrary(lib)
FlagsManager:SetIgnoreIndexes({})
FlagsManager:SetFolder("Avantrix/PetaPeta")
FlagsManager:InitSaveSystem(tabs.SettingsTab)

--// ==================== UPDATE LABELS ====================
local function updateLabels()
    task.spawn(function()
        while getgenv().XenonESPActive and main do
            pcall(function()
                -- Update ESP visibility and tracking
                updateESPVisibility()
                
                -- Scan and modify ProximityPrompts if enabled
                if ESPState.ProximityPromptEnabled then
                    scanAndModifyProximityPrompts()
                end
            end)
            task.wait(0.1) -- Update more frequently for better tracking
        end
    end)
end

--// ==================== MAIN UPDATE LOOP ====================
-- Start the update loop
updateLabels()

-- Start continuous ESP update for movement tracking
UpdateConnection = RunService.Heartbeat:Connect(function()
    if getgenv().XenonESPActive then
        updateESPVisibility()
    end
end)

-- Continuous scanning loop
task.spawn(function()
    while getgenv().XenonESPActive do
        task.wait(2) -- Scan every 2 seconds
        
        if not getgenv().XenonESPActive then break end
        
        if ESPState.SpawnedItemsESPEnabled then
            scanSpawnedItems()
        end
        
        if ESPState.PetaPetaGhostESPEnabled then
            scanPetaPetaGhost()
        end
        
        if ESPState.RoomsESPEnabled then
            scanRooms()
        end
        
        if ESPState.ProximityPromptEnabled then
            scanAndModifyProximityPrompts()
        end
        
        Stats.LastUpdate = tick()
    end
end)

--// ==================== CLEANUP ====================
-- Cleanup when player leaves or script is closed
local function onScriptClose()
    cleanupConnections()
end

-- Cleanup when player leaves
game:GetService("Players").PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        onScriptClose()
    end
end)

-- Cleanup when CoreGui is destroyed
local coreGui = game:GetService("CoreGui")
local avantrixGui = coreGui:WaitForChild("Avantrix", 1)
if avantrixGui then
    avantrixGui.AncestryChanged:Connect(function()
        if not avantrixGui.Parent then
            onScriptClose()
        end
    end)
end

--// ==================== INITIALIZE ====================
-- Initial setup
task.spawn(function()
    task.wait(1)
    
    -- Check if folders exist
    local server = Workspace:FindFirstChild("Server")
    if server then
        local spawnedItems = server:FindFirstChild("SpawnedItems")
        local mapGenerated = server:FindFirstChild("MapGenerated")
        
        if spawnedItems then 
            lib:Notification('System Check', '‚úÖ SpawnedItems found!', 2)
        else
            lib:Notification('System Check', '‚ö†Ô∏è SpawnedItems not found!', 3)
        end
        
        if mapGenerated then
            local rooms = mapGenerated:FindFirstChild("Rooms")
            if rooms then
                lib:Notification('System Check', '‚úÖ Rooms found!', 2)
            else
                lib:Notification('System Check', '‚ö†Ô∏è Rooms not found!', 3)
            end
        else
            lib:Notification('System Check', '‚ö†Ô∏è MapGenerated not found!', 3)
        end
    else
        lib:Notification('System Check', '‚ö†Ô∏è Server not found', 3)
    end
    
    -- Check for Enemy folder
    local client = Workspace:FindFirstChild("Client")
    if client then
        local enemies = client:FindFirstChild("Enemy")
        if enemies then
            lib:Notification('System Check', '‚úÖ Enemy found!', 2)
        else
            lib:Notification('System Check', '‚ö†Ô∏è Enemy not found!', 3)
        end
    else
        lib:Notification('System Check', '‚ö†Ô∏è Client not found', 3)
    end
    
    -- Setup initial character connection if character exists
    if LocalPlayer.Character then
        onCharacterAdded(LocalPlayer.Character)
    end
end)
