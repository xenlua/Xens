local httpService = game:GetService("HttpService")

local FlagsManager = {}

FlagsManager.Folder = "Avantrix"
FlagsManager.Ignore = {}
FlagsManager.Flags = {}
FlagsManager.Library = nil
FlagsManager.Parser = {
    Toggle = {
        Save = function(idx, object)
            return { type = "Toggle", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Slider = {
        Save = function(idx, object)
            return { type = "Slider", idx = idx, value = tostring(object.Value) }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(tonumber(data.value))
            end
        end,
    },
    Dropdown = {
        Save = function(idx, object)
            return { type = "Dropdown", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Bind = {
        Save = function(idx, object)
            return { type = "Bind", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Colorpicker = {
        Save = function(idx, object)
            return { type = "Colorpicker", idx = idx, value = object.Value:ToHex() }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(Color3.fromHex(data.value))
            end
        end,
    },
    Input = {
        Save = function(idx, object)
            return { type = "Input", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    }
}

function FlagsManager:SetIgnoreIndexes(list)
    for _, key in next, list do
        FlagsManager.Ignore[key] = true
    end
end

function FlagsManager:SetFolder(folder)
    FlagsManager.Folder = folder
    FlagsManager:BuildFolderTree()
end

function FlagsManager:Save(name)
    if not name then
        return false, "no config file is selected"
    end

    local fullPath = FlagsManager.Folder .. "/settings/" .. name .. ".json"

    local data = {
        objects = {},
    }

    for idx, option in next, FlagsManager.Flags do
        if not FlagsManager.Parser[option.Type] then
            continue
        end
        if FlagsManager.Ignore[idx] then
            continue
        end

        table.insert(data.objects, FlagsManager.Parser[option.Type].Save(idx, option))
    end

    local success, encoded = pcall(httpService.JSONEncode, httpService, data)
    if not success then
        return false, "failed to encode data"
    end

    writefile(fullPath, encoded)
    return true
end

function FlagsManager:Load(name)
    if not name then
        return false, "no config file is selected"
    end

    local file = FlagsManager.Folder .. "/settings/" .. name .. ".json"
    if not isfile(file) then
        return false, "invalid file"
    end

    local success, decoded = pcall(httpService.JSONDecode, httpService, readfile(file))
    if not success then
        return false, "decode error"
    end

    for _, option in next, decoded.objects do
        if FlagsManager.Parser[option.type] then
            task.spawn(function()
                FlagsManager.Parser[option.type].Load(option.idx, option)
            end)
        end
    end

    return true
end

function FlagsManager:Delete(name)
    if not name then
        return false, "no config file is selected"
    end

    local file = FlagsManager.Folder .. "/settings/" .. name .. ".json"
    if not isfile(file) then
        return false, "config file does not exist"
    end

    local success = pcall(function()
        delfile(file)
    end)

    if not success then
        return false, "failed to delete config file"
    end

    return true
end

function FlagsManager:BuildFolderTree()
    local paths = {
        FlagsManager.Folder,
        FlagsManager.Folder .. "/settings",
    }

    for i = 1, #paths do
        local str = paths[i]
        if not isfolder(str) then
            makefolder(str)
        end
    end
end

function FlagsManager:RefreshConfigList()
    local list = listfiles(FlagsManager.Folder .. "/settings")

    local out = {}
    for i = 1, #list do
        local file = list[i]
        if file:sub(-5) == ".json" then
            local pos = file:find(".json", 1, true)
            local start = pos

            local char = file:sub(pos, pos)
            while char ~= "/" and char ~= "\\" and char ~= "" do
                pos = pos - 1
                char = file:sub(pos, pos)
            end

            if char == "/" or char == "\\" then
                local name = file:sub(pos + 1, start - 1)
                if name ~= "options" then
                    table.insert(out, name)
                end
            end
        end
    end

    return out
end

function FlagsManager:GetAutoLoadConfig()
    local autoLoadFile = FlagsManager.Folder .. "/autoload.txt"
    if isfile(autoLoadFile) then
        return readfile(autoLoadFile)
    end
    return ""
end

function FlagsManager:SetAutoLoadConfig(configName)
    local autoLoadFile = FlagsManager.Folder .. "/autoload.txt"
    if configName and configName ~= "" then
        writefile(autoLoadFile, configName)
    else
        if isfile(autoLoadFile) then
            delfile(autoLoadFile)
        end
    end
end

function FlagsManager:SetLibrary(library)
    FlagsManager.Library = library
    FlagsManager.Flags = library.Flags
end

function FlagsManager:InitSaveSystem(tab)
    local SaveManager_ConfigName = ""
    local SaveManager_AutoLoadConfig = FlagsManager:GetAutoLoadConfig()

    -- Config Name Input
    tab:Textbox("Config Name", false, function(value)
        SaveManager_ConfigName = value
    end)

    -- Configuration List Dropdown
    tab:Dropdown("Configuration List", FlagsManager:RefreshConfigList(), "", function(value)
        -- Handle dropdown selection
    end)

    -- Create a separator for better organization
    tab:Seperator("Configuration Management")

    -- Create Configuration Button (Primary/Highlighted)
    tab:Button("Create a Configuration", function()
        local name = SaveManager_ConfigName

        if name:gsub(" ", "") == "" then
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Error', 'Invalid config name (empty)', 3)
            end
            return
        end

        local success, err = FlagsManager:Save(name)
        if not success then
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Error', 'Failed to create config: ' .. err, 3)
            end
            return
        end

        if FlagsManager.Library and FlagsManager.Library.Notification then
            FlagsManager.Library:Notification('Success', string.format('Created config "%s"', name), 3)
        end

        -- Refresh the configuration list
        if FlagsManager.Flags and FlagsManager.Flags["Configuration List"] then
            FlagsManager.Flags["Configuration List"]:SetOptions(FlagsManager:RefreshConfigList())
        end
    end)

    -- Load Configuration Button
    tab:Button("Load a Configuration", function()
        local selectedConfig = ""
        if FlagsManager.Flags and FlagsManager.Flags["Configuration List"] then
            selectedConfig = FlagsManager.Flags["Configuration List"]:GetSelected()
        end

        if not selectedConfig or selectedConfig == "" then
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Error', 'No config selected', 3)
            end
            return
        end

        local success, err = FlagsManager:Load(selectedConfig)
        if not success then
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Error', 'Failed to load config: ' .. err, 3)
            end
            return
        end

        if FlagsManager.Library and FlagsManager.Library.Notification then
            FlagsManager.Library:Notification('Success', string.format('Loaded config "%s"', selectedConfig), 3)
        end
    end)

    -- Save a New Configuration Button
    tab:Button("Save a New Configuration", function()
        local selectedConfig = ""
        if FlagsManager.Flags and FlagsManager.Flags["Configuration List"] then
            selectedConfig = FlagsManager.Flags["Configuration List"]:GetSelected()
        end

        if not selectedConfig or selectedConfig == "" then
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Error', 'No config selected', 3)
            end
            return
        end

        local success, err = FlagsManager:Save(selectedConfig)
        if not success then
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Error', 'Failed to save config: ' .. err, 3)
            end
            return
        end

        if FlagsManager.Library and FlagsManager.Library.Notification then
            FlagsManager.Library:Notification('Success', string.format('Saved config "%s"', selectedConfig), 3)
        end
    end)

    -- Delete a Configuration Button
    tab:Button("Delete a Configuration", function()
        local selectedConfig = ""
        if FlagsManager.Flags and FlagsManager.Flags["Configuration List"] then
            selectedConfig = FlagsManager.Flags["Configuration List"]:GetSelected()
        end

        if not selectedConfig or selectedConfig == "" then
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Error', 'No config selected for deletion', 3)
            end
            return
        end

        local success, err = FlagsManager:Delete(selectedConfig)
        if not success then
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Error', 'Failed to delete config: ' .. err, 3)
            end
            return
        end

        if FlagsManager.Library and FlagsManager.Library.Notification then
            FlagsManager.Library:Notification('Success', string.format('Deleted config "%s"', selectedConfig), 3)
        end

        -- Refresh the list after deletion
        if FlagsManager.Flags and FlagsManager.Flags["Configuration List"] then
            FlagsManager.Flags["Configuration List"]:SetOptions(FlagsManager:RefreshConfigList())
        end
    end)

    -- Refresh Configuration List Button
    tab:Button("Refresh Configuration List", function()
        if FlagsManager.Flags and FlagsManager.Flags["Configuration List"] then
            FlagsManager.Flags["Configuration List"]:SetOptions(FlagsManager:RefreshConfigList())
        end
        
        if FlagsManager.Library and FlagsManager.Library.Notification then
            FlagsManager.Library:Notification('Info', 'Configuration list refreshed', 2)
        end
    end)

    -- Auto Load Config Button
    tab:Button("Auto Load Config", function()
        local selectedConfig = ""
        if FlagsManager.Flags and FlagsManager.Flags["Configuration List"] then
            selectedConfig = FlagsManager.Flags["Configuration List"]:GetSelected()
        end

        if not selectedConfig or selectedConfig == "" then
            -- Clear auto load if no config selected
            FlagsManager:SetAutoLoadConfig("")
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Info', 'Auto load config cleared', 3)
            end
        else
            FlagsManager:SetAutoLoadConfig(selectedConfig)
            if FlagsManager.Library and FlagsManager.Library.Notification then
                FlagsManager.Library:Notification('Success', string.format('Set auto load config to "%s"', selectedConfig), 3)
            end
        end
    end)

    -- Auto Load Config Section
    tab:Seperator("Auto Load Config")
    tab:Label("Current Auto Load Config: " .. (SaveManager_AutoLoadConfig ~= "" and SaveManager_AutoLoadConfig or "None"))

    -- Auto load the config if one is set
    if SaveManager_AutoLoadConfig ~= "" then
        task.spawn(function()
            wait(2) -- Wait for everything to initialize
            local success, err = FlagsManager:Load(SaveManager_AutoLoadConfig)
            if success then
                if FlagsManager.Library and FlagsManager.Library.Notification then
                    FlagsManager.Library:Notification('Success', string.format('Auto loaded config "%s"', SaveManager_AutoLoadConfig), 3)
                end
            else
                if FlagsManager.Library and FlagsManager.Library.Notification then
                    FlagsManager.Library:Notification('Error', string.format('Failed to auto load config "%s": %s', SaveManager_AutoLoadConfig, err), 3)
                end
            end
        end)
    end

    FlagsManager:BuildFolderTree()
end

return FlagsManager
