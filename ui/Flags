local httpService = game:GetService("HttpService")

local FlagsManager = {}

FlagsManager.Folder = "Avantrix"
FlagsManager.Ignore = {}
FlagsManager.Flags = {}
FlagsManager.Library = nil
FlagsManager.Parser = {
    Toggle = {
        Save = function(idx, object)
            return { type = "Toggle", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Slider = {
        Save = function(idx, object)
            return { type = "Slider", idx = idx, value = tostring(object.Value) }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(tonumber(data.value))
            end
        end,
    },
    Dropdown = {
        Save = function(idx, object)
            return { type = "Dropdown", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Bind = {
        Save = function(idx, object)
            return { type = "Bind", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    },
    Colorpicker = {
        Save = function(idx, object)
            return { type = "Colorpicker", idx = idx, value = object.Value:ToHex() }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(Color3.fromHex(data.value))
            end
        end,
    },
    Input = {
        Save = function(idx, object)
            return { type = "Input", idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            if FlagsManager.Flags[idx] then
                FlagsManager.Flags[idx]:Set(data.value)
            end
        end,
    }
}

function FlagsManager:SetIgnoreIndexes(list)
    for _, key in next, list do
        FlagsManager.Ignore[key] = true
    end
end

function FlagsManager:SetFolder(folder)
    FlagsManager.Folder = folder
    FlagsManager:BuildFolderTree()
end

function FlagsManager:Save(name)
    if not name then
        return false, "no config file is selected"
    end

    local fullPath = FlagsManager.Folder .. "/settings/" .. name .. ".json"

    local data = {
        objects = {},
    }

    for idx, option in next, FlagsManager.Flags do
        if not FlagsManager.Parser[option.Type] then
            continue
        end
        if FlagsManager.Ignore[idx] then
            continue
        end

        table.insert(data.objects, FlagsManager.Parser[option.Type].Save(idx, option))
    end

    local success, encoded = pcall(httpService.JSONEncode, httpService, data)
    if not success then
        return false, "failed to encode data"
    end

    writefile(fullPath, encoded)
    return true
end

function FlagsManager:Load(name)
    if not name then
        return false, "no config file is selected"
    end

    local file = FlagsManager.Folder .. "/settings/" .. name .. ".json"
    if not isfile(file) then
        return false, "invalid file"
    end

    local success, decoded = pcall(httpService.JSONDecode, httpService, readfile(file))
    if not success then
        return false, "decode error"
    end

    for _, option in next, decoded.objects do
        if FlagsManager.Parser[option.type] then
            task.spawn(function()
                FlagsManager.Parser[option.type].Load(option.idx, option)
            end)
        end
    end

    return true
end

function FlagsManager:Delete(name)
    if not name then
        return false, "no config file is selected"
    end

    local file = FlagsManager.Folder .. "/settings/" .. name .. ".json"
    if not isfile(file) then
        return false, "config file does not exist"
    end

    local success = pcall(function()
        delfile(file)
    end)

    if not success then
        return false, "failed to delete config file"
    end

    return true
end

function FlagsManager:BuildFolderTree()
    local paths = {
        FlagsManager.Folder,
        FlagsManager.Folder .. "/settings",
    }

    for i = 1, #paths do
        local str = paths[i]
        if not isfolder(str) then
            makefolder(str)
        end
    end
end

function FlagsManager:RefreshConfigList()
    local list = listfiles(FlagsManager.Folder .. "/settings")

    local out = {}
    for i = 1, #list do
        local file = list[i]
        if file:sub(-5) == ".json" then
            local pos = file:find(".json", 1, true)
            local start = pos

            local char = file:sub(pos, pos)
            while char ~= "/" and char ~= "\\" and char ~= "" do
                pos = pos - 1
                char = file:sub(pos, pos)
            end

            if char == "/" or char == "\\" then
                local name = file:sub(pos + 1, start - 1)
                if name ~= "options" then
                    table.insert(out, name)
                end
            end
        end
    end

    return out
end

function FlagsManager:GetAutoLoadConfig()
    local autoLoadFile = FlagsManager.Folder .. "/autoload.txt"
    if isfile(autoLoadFile) then
        return readfile(autoLoadFile)
    end
    return ""
end

function FlagsManager:SetAutoLoadConfig(configName)
    local autoLoadFile = FlagsManager.Folder .. "/autoload.txt"
    if configName and configName ~= "" then
        writefile(autoLoadFile, configName)
    else
        if isfile(autoLoadFile) then
            delfile(autoLoadFile)
        end
    end
end

function FlagsManager:SetLibrary(library)
    FlagsManager.Library = library
    FlagsManager.Flags = library.Flags
end

-- Fungsi helper untuk notifikasi yang aman
local function SafeNotification(title, message, duration)
    if FlagsManager.Library and FlagsManager.Library.Notification then
        pcall(function()
            FlagsManager.Library:Notification(title, message, duration or 3)
        end)
    else
        print("[FlagsManager] " .. title .. ": " .. message)
    end
end

-- Fungsi helper untuk membuat UI element dengan error handling
local function SafeCreateElement(parent, elementType, config)
    if not parent then
        warn("SafeCreateElement: Parent is nil")
        return nil
    end
    
    local success, element = pcall(function()
        if elementType == "Section" then
            return parent:AddSection(config)
        elseif elementType == "Textbox" then
            return parent:AddTextbox(config)
        elseif elementType == "Dropdown" then
            return parent:AddDropdown(config.Flag or "TempDropdown", config)
        elseif elementType == "GroupButton" then
            return parent:AddGroupButton()
        elseif elementType == "Button" then
            return parent:AddButton(config)
        elseif elementType == "Paragraph" then
            return parent:AddParagraph(config)
        end
    end)
    
    if success and element then
        return element
    else
        warn("SafeCreateElement: Failed to create " .. elementType)
        return nil
    end
end

function FlagsManager:InitSaveSystem(tab)
    -- Validasi parameter utama
    if not tab then
        warn("FlagsManager:InitSaveSystem - tab parameter is required")
        SafeNotification('Error', 'Failed to initialize save system: tab parameter is nil', 5)
        return false
    end
    
    -- Validasi Library
    if not FlagsManager.Library then
        warn("FlagsManager:InitSaveSystem - Library is not set. Call SetLibrary first.")
        SafeNotification('Error', 'Library not initialized. Call SetLibrary first.', 5)
        return false
    end
    
    -- Validasi Flags
    if not FlagsManager.Flags then
        warn("FlagsManager:InitSaveSystem - Flags is not set. Library may not be properly initialized.")
        SafeNotification('Error', 'Flags not initialized properly.', 5)
        return false
    end

    -- Build folder structure terlebih dahulu
    FlagsManager:BuildFolderTree()

    -- Variabel untuk menyimpan state
    local SaveManager_ConfigName = ""
    local SaveManager_AutoLoadConfig = FlagsManager:GetAutoLoadConfig()

    -- Buat Configuration Section dengan format yang diminta
    local ConfigSection = SafeCreateElement(tab, "Section", {
        Title = gradient("Import/Export Configs"), 
        Description = "",
    })
    
    if not ConfigSection then
        SafeNotification('Error', 'Failed to create Configuration section', 5)
        return false
    end

    -- Tambahkan Textbox untuk nama config
    local ConfigNameTextbox = SafeCreateElement(ConfigSection, "Textbox", {
        Title = "Config Name",
        Description = "Enter a name for your configuration",
        Default = "",
        PlaceHolder = "Enter config name...",
        TextDisappear = false,
        Callback = function(value)
            SaveManager_ConfigName = value or ""
        end
    })

    -- Tambahkan Dropdown untuk daftar konfigurasi
    local ConfigDropdown = SafeCreateElement(ConfigSection, "Dropdown", {
        Flag = "SaveManager_ConfigurationList",
        Title = "Configuration List",
        Description = "Select a configuration to load",
        Options = FlagsManager:RefreshConfigList(),
        Default = "",
        PlaceHolder = "Select configuration...",
        Multiple = false,
        Callback = function(value)
            -- Callback untuk dropdown selection
        end
    })

    -- Buat Group Button untuk tombol-tombol
    local SaveManagerGroupButton = SafeCreateElement(ConfigSection, "GroupButton")
    
    if not SaveManagerGroupButton then
        SafeNotification('Error', 'Failed to create button group', 5)
        return false
    end

    -- Konfigurasi tombol-tombol
    local buttonConfigs = {
        {
            Title = "Create Configuration",
            Variant = "Primary",
            Callback = function()
                local name = SaveManager_ConfigName

                if not name or name:gsub(" ", "") == "" then
                    SafeNotification('Error', 'Please enter a valid config name', 3)
                    return
                end

                local success, err = FlagsManager:Save(name)
                if not success then
                    SafeNotification('Error', 'Failed to create config: ' .. (err or "unknown error"), 3)
                    return
                end

                SafeNotification('Success', string.format('Created config "%s"', name), 3)

                -- Refresh dropdown list
                if FlagsManager.Flags.SaveManager_ConfigurationList then
                    pcall(function()
                        FlagsManager.Flags.SaveManager_ConfigurationList:Refresh(FlagsManager:RefreshConfigList())
                        FlagsManager.Flags.SaveManager_ConfigurationList:Set("")
                    end)
                end
            end,
        },
        {
            Title = "Load Configuration",
            Variant = "Outline",
            Callback = function()
                local name = FlagsManager.Flags.SaveManager_ConfigurationList and FlagsManager.Flags.SaveManager_ConfigurationList.Value

                if not name or name == "" then
                    SafeNotification('Error', 'Please select a config to load', 3)
                    return
                end

                local success, err = FlagsManager:Load(name)
                if not success then
                    SafeNotification('Error', 'Failed to load config: ' .. (err or "unknown error"), 3)
                    return
                end

                SafeNotification('Success', string.format('Loaded config "%s"', name), 3)
            end,
        },
        {
            Title = "Save Configuration",
            Variant = "Outline",
            Callback = function()
                local name = FlagsManager.Flags.SaveManager_ConfigurationList and FlagsManager.Flags.SaveManager_ConfigurationList.Value

                if not name or name == "" then
                    SafeNotification('Error', 'Please select a config to save', 3)
                    return
                end

                local success, err = FlagsManager:Save(name)
                if not success then
                    SafeNotification('Error', 'Failed to save config: ' .. (err or "unknown error"), 3)
                    return
                end

                SafeNotification('Success', string.format('Saved config "%s"', name), 3)
            end,
        },
        {
            Title = "Delete Configuration",
            Variant = "Outline",
            Callback = function()
                local name = FlagsManager.Flags.SaveManager_ConfigurationList and FlagsManager.Flags.SaveManager_ConfigurationList.Value

                if not name or name == "" then
                    SafeNotification('Error', 'Please select a config to delete', 3)
                    return
                end

                local success, err = FlagsManager:Delete(name)
                if not success then
                    SafeNotification('Error', 'Failed to delete config: ' .. (err or "unknown error"), 3)
                    return
                end

                SafeNotification('Success', string.format('Deleted config "%s"', name), 3)

                -- Refresh dropdown list setelah penghapusan
                if FlagsManager.Flags.SaveManager_ConfigurationList then
                    pcall(function()
                        FlagsManager.Flags.SaveManager_ConfigurationList:Refresh(FlagsManager:RefreshConfigList())
                        FlagsManager.Flags.SaveManager_ConfigurationList:Set("")
                    end)
                end
            end,
        },
        {
            Title = "Refresh List",
            Variant = "Outline",
            Callback = function()
                if FlagsManager.Flags.SaveManager_ConfigurationList then
                    pcall(function()
                        FlagsManager.Flags.SaveManager_ConfigurationList:Refresh(FlagsManager:RefreshConfigList())
                        FlagsManager.Flags.SaveManager_ConfigurationList:Set("")
                    end)
                end
                SafeNotification('Info', 'Configuration list refreshed', 2)
            end,
        },
        {
            Title = "Set Auto Load",
            Variant = "Outline",
            Callback = function()
                local name = FlagsManager.Flags.SaveManager_ConfigurationList and FlagsManager.Flags.SaveManager_ConfigurationList.Value

                if not name or name == "" then
                    -- Clear auto load
                    FlagsManager:SetAutoLoadConfig("")
                    SafeNotification('Info', 'Auto load config cleared', 3)
                else
                    FlagsManager:SetAutoLoadConfig(name)
                    SafeNotification('Success', string.format('Set auto load config to "%s"', name), 3)
                end
            end,
        }
    }

    -- Tambahkan semua tombol
    for _, buttonConfig in ipairs(buttonConfigs) do
        local button = SafeCreateElement(SaveManagerGroupButton, "Button", buttonConfig)
        if not button then
            warn("Failed to create button: " .. buttonConfig.Title)
        end
    end

    -- Tambahkan informasi Auto Load Config
    local AutoLoadParagraph = SafeCreateElement(ConfigSection, "Paragraph", {
        Title = "Auto Load Config",
        Description = "Current Auto Load: " .. (SaveManager_AutoLoadConfig ~= "" and SaveManager_AutoLoadConfig or "None"),
    })

    -- Auto load config jika ada yang diset
    if SaveManager_AutoLoadConfig ~= "" then
        task.spawn(function()
            task.wait(2) -- Tunggu inisialisasi selesai
            local success, err = FlagsManager:Load(SaveManager_AutoLoadConfig)
            if success then
                SafeNotification('Success', string.format('Auto loaded config "%s"', SaveManager_AutoLoadConfig), 3)
            else
                SafeNotification('Warning', string.format('Failed to auto load config "%s": %s', SaveManager_AutoLoadConfig, err or "unknown error"), 3)
            end
        end)
    end

    SafeNotification('Success', 'Save system initialized successfully', 2)
    return true
end

return FlagsManager
